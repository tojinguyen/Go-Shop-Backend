// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	jwt "github.com/toji-dev/go-shop/internal/pkg/jwt"
)

// JwtService is an autogenerated mock type for the JwtService type
type JwtService struct {
	mock.Mock
}

type JwtService_Expecter struct {
	mock *mock.Mock
}

func (_m *JwtService) EXPECT() *JwtService_Expecter {
	return &JwtService_Expecter{mock: &_m.Mock}
}

// GenerateAccessToken provides a mock function with given fields: input
func (_m *JwtService) GenerateAccessToken(input *jwt.GenerateTokenInput) (string, error) {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for GenerateAccessToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*jwt.GenerateTokenInput) (string, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(*jwt.GenerateTokenInput) string); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*jwt.GenerateTokenInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JwtService_GenerateAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateAccessToken'
type JwtService_GenerateAccessToken_Call struct {
	*mock.Call
}

// GenerateAccessToken is a helper method to define mock.On call
//   - input *jwt.GenerateTokenInput
func (_e *JwtService_Expecter) GenerateAccessToken(input interface{}) *JwtService_GenerateAccessToken_Call {
	return &JwtService_GenerateAccessToken_Call{Call: _e.mock.On("GenerateAccessToken", input)}
}

func (_c *JwtService_GenerateAccessToken_Call) Run(run func(input *jwt.GenerateTokenInput)) *JwtService_GenerateAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*jwt.GenerateTokenInput))
	})
	return _c
}

func (_c *JwtService_GenerateAccessToken_Call) Return(_a0 string, _a1 error) *JwtService_GenerateAccessToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *JwtService_GenerateAccessToken_Call) RunAndReturn(run func(*jwt.GenerateTokenInput) (string, error)) *JwtService_GenerateAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateRefreshToken provides a mock function with given fields: input
func (_m *JwtService) GenerateRefreshToken(input *jwt.GenerateTokenInput) (string, error) {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for GenerateRefreshToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*jwt.GenerateTokenInput) (string, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(*jwt.GenerateTokenInput) string); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*jwt.GenerateTokenInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JwtService_GenerateRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateRefreshToken'
type JwtService_GenerateRefreshToken_Call struct {
	*mock.Call
}

// GenerateRefreshToken is a helper method to define mock.On call
//   - input *jwt.GenerateTokenInput
func (_e *JwtService_Expecter) GenerateRefreshToken(input interface{}) *JwtService_GenerateRefreshToken_Call {
	return &JwtService_GenerateRefreshToken_Call{Call: _e.mock.On("GenerateRefreshToken", input)}
}

func (_c *JwtService_GenerateRefreshToken_Call) Run(run func(input *jwt.GenerateTokenInput)) *JwtService_GenerateRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*jwt.GenerateTokenInput))
	})
	return _c
}

func (_c *JwtService_GenerateRefreshToken_Call) Return(_a0 string, _a1 error) *JwtService_GenerateRefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *JwtService_GenerateRefreshToken_Call) RunAndReturn(run func(*jwt.GenerateTokenInput) (string, error)) *JwtService_GenerateRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateAccessToken provides a mock function with given fields: ctx, tokenString
func (_m *JwtService) ValidateAccessToken(ctx context.Context, tokenString string) (*jwt.CustomJwtClaims, error) {
	ret := _m.Called(ctx, tokenString)

	if len(ret) == 0 {
		panic("no return value specified for ValidateAccessToken")
	}

	var r0 *jwt.CustomJwtClaims
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*jwt.CustomJwtClaims, error)); ok {
		return rf(ctx, tokenString)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *jwt.CustomJwtClaims); ok {
		r0 = rf(ctx, tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.CustomJwtClaims)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JwtService_ValidateAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateAccessToken'
type JwtService_ValidateAccessToken_Call struct {
	*mock.Call
}

// ValidateAccessToken is a helper method to define mock.On call
//   - ctx context.Context
//   - tokenString string
func (_e *JwtService_Expecter) ValidateAccessToken(ctx interface{}, tokenString interface{}) *JwtService_ValidateAccessToken_Call {
	return &JwtService_ValidateAccessToken_Call{Call: _e.mock.On("ValidateAccessToken", ctx, tokenString)}
}

func (_c *JwtService_ValidateAccessToken_Call) Run(run func(ctx context.Context, tokenString string)) *JwtService_ValidateAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *JwtService_ValidateAccessToken_Call) Return(_a0 *jwt.CustomJwtClaims, _a1 error) *JwtService_ValidateAccessToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *JwtService_ValidateAccessToken_Call) RunAndReturn(run func(context.Context, string) (*jwt.CustomJwtClaims, error)) *JwtService_ValidateAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateRefreshToken provides a mock function with given fields: tokenString
func (_m *JwtService) ValidateRefreshToken(tokenString string) (*jwt.CustomJwtClaims, error) {
	ret := _m.Called(tokenString)

	if len(ret) == 0 {
		panic("no return value specified for ValidateRefreshToken")
	}

	var r0 *jwt.CustomJwtClaims
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*jwt.CustomJwtClaims, error)); ok {
		return rf(tokenString)
	}
	if rf, ok := ret.Get(0).(func(string) *jwt.CustomJwtClaims); ok {
		r0 = rf(tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.CustomJwtClaims)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JwtService_ValidateRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateRefreshToken'
type JwtService_ValidateRefreshToken_Call struct {
	*mock.Call
}

// ValidateRefreshToken is a helper method to define mock.On call
//   - tokenString string
func (_e *JwtService_Expecter) ValidateRefreshToken(tokenString interface{}) *JwtService_ValidateRefreshToken_Call {
	return &JwtService_ValidateRefreshToken_Call{Call: _e.mock.On("ValidateRefreshToken", tokenString)}
}

func (_c *JwtService_ValidateRefreshToken_Call) Run(run func(tokenString string)) *JwtService_ValidateRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *JwtService_ValidateRefreshToken_Call) Return(_a0 *jwt.CustomJwtClaims, _a1 error) *JwtService_ValidateRefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *JwtService_ValidateRefreshToken_Call) RunAndReturn(run func(string) (*jwt.CustomJwtClaims, error)) *JwtService_ValidateRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewJwtService creates a new instance of JwtService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJwtService(t interface {
	mock.TestingT
	Cleanup(func())
}) *JwtService {
	mock := &JwtService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
