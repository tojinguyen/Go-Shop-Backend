// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// RedisServiceInterface is an autogenerated mock type for the RedisServiceInterface type
type RedisServiceInterface struct {
	mock.Mock
}

type RedisServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *RedisServiceInterface) EXPECT() *RedisServiceInterface_Expecter {
	return &RedisServiceInterface_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *RedisServiceInterface) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RedisServiceInterface_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type RedisServiceInterface_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *RedisServiceInterface_Expecter) Close() *RedisServiceInterface_Close_Call {
	return &RedisServiceInterface_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *RedisServiceInterface_Close_Call) Run(run func()) *RedisServiceInterface_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RedisServiceInterface_Close_Call) Return(_a0 error) *RedisServiceInterface_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RedisServiceInterface_Close_Call) RunAndReturn(run func() error) *RedisServiceInterface_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Decrement provides a mock function with given fields: key
func (_m *RedisServiceInterface) Decrement(key string) (int64, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Decrement")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int64, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RedisServiceInterface_Decrement_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decrement'
type RedisServiceInterface_Decrement_Call struct {
	*mock.Call
}

// Decrement is a helper method to define mock.On call
//   - key string
func (_e *RedisServiceInterface_Expecter) Decrement(key interface{}) *RedisServiceInterface_Decrement_Call {
	return &RedisServiceInterface_Decrement_Call{Call: _e.mock.On("Decrement", key)}
}

func (_c *RedisServiceInterface_Decrement_Call) Run(run func(key string)) *RedisServiceInterface_Decrement_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *RedisServiceInterface_Decrement_Call) Return(_a0 int64, _a1 error) *RedisServiceInterface_Decrement_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RedisServiceInterface_Decrement_Call) RunAndReturn(run func(string) (int64, error)) *RedisServiceInterface_Decrement_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: key
func (_m *RedisServiceInterface) Delete(key string) error {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RedisServiceInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type RedisServiceInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - key string
func (_e *RedisServiceInterface_Expecter) Delete(key interface{}) *RedisServiceInterface_Delete_Call {
	return &RedisServiceInterface_Delete_Call{Call: _e.mock.On("Delete", key)}
}

func (_c *RedisServiceInterface_Delete_Call) Run(run func(key string)) *RedisServiceInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *RedisServiceInterface_Delete_Call) Return(_a0 error) *RedisServiceInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RedisServiceInterface_Delete_Call) RunAndReturn(run func(string) error) *RedisServiceInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function with given fields: key
func (_m *RedisServiceInterface) Exists(key string) (bool, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RedisServiceInterface_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type RedisServiceInterface_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - key string
func (_e *RedisServiceInterface_Expecter) Exists(key interface{}) *RedisServiceInterface_Exists_Call {
	return &RedisServiceInterface_Exists_Call{Call: _e.mock.On("Exists", key)}
}

func (_c *RedisServiceInterface_Exists_Call) Run(run func(key string)) *RedisServiceInterface_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *RedisServiceInterface_Exists_Call) Return(_a0 bool, _a1 error) *RedisServiceInterface_Exists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RedisServiceInterface_Exists_Call) RunAndReturn(run func(string) (bool, error)) *RedisServiceInterface_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// FlushDB provides a mock function with no fields
func (_m *RedisServiceInterface) FlushDB() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FlushDB")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RedisServiceInterface_FlushDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FlushDB'
type RedisServiceInterface_FlushDB_Call struct {
	*mock.Call
}

// FlushDB is a helper method to define mock.On call
func (_e *RedisServiceInterface_Expecter) FlushDB() *RedisServiceInterface_FlushDB_Call {
	return &RedisServiceInterface_FlushDB_Call{Call: _e.mock.On("FlushDB")}
}

func (_c *RedisServiceInterface_FlushDB_Call) Run(run func()) *RedisServiceInterface_FlushDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RedisServiceInterface_FlushDB_Call) Return(_a0 error) *RedisServiceInterface_FlushDB_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RedisServiceInterface_FlushDB_Call) RunAndReturn(run func() error) *RedisServiceInterface_FlushDB_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: key
func (_m *RedisServiceInterface) Get(key string) (string, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RedisServiceInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type RedisServiceInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key string
func (_e *RedisServiceInterface_Expecter) Get(key interface{}) *RedisServiceInterface_Get_Call {
	return &RedisServiceInterface_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *RedisServiceInterface_Get_Call) Run(run func(key string)) *RedisServiceInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *RedisServiceInterface_Get_Call) Return(_a0 string, _a1 error) *RedisServiceInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RedisServiceInterface_Get_Call) RunAndReturn(run func(string) (string, error)) *RedisServiceInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetJSON provides a mock function with given fields: key, dest
func (_m *RedisServiceInterface) GetJSON(key string, dest interface{}) error {
	ret := _m.Called(key, dest)

	if len(ret) == 0 {
		panic("no return value specified for GetJSON")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(key, dest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RedisServiceInterface_GetJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJSON'
type RedisServiceInterface_GetJSON_Call struct {
	*mock.Call
}

// GetJSON is a helper method to define mock.On call
//   - key string
//   - dest interface{}
func (_e *RedisServiceInterface_Expecter) GetJSON(key interface{}, dest interface{}) *RedisServiceInterface_GetJSON_Call {
	return &RedisServiceInterface_GetJSON_Call{Call: _e.mock.On("GetJSON", key, dest)}
}

func (_c *RedisServiceInterface_GetJSON_Call) Run(run func(key string, dest interface{})) *RedisServiceInterface_GetJSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *RedisServiceInterface_GetJSON_Call) Return(_a0 error) *RedisServiceInterface_GetJSON_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RedisServiceInterface_GetJSON_Call) RunAndReturn(run func(string, interface{}) error) *RedisServiceInterface_GetJSON_Call {
	_c.Call.Return(run)
	return _c
}

// GetTTL provides a mock function with given fields: key
func (_m *RedisServiceInterface) GetTTL(key string) (time.Duration, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetTTL")
	}

	var r0 time.Duration
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (time.Duration, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) time.Duration); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RedisServiceInterface_GetTTL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTTL'
type RedisServiceInterface_GetTTL_Call struct {
	*mock.Call
}

// GetTTL is a helper method to define mock.On call
//   - key string
func (_e *RedisServiceInterface_Expecter) GetTTL(key interface{}) *RedisServiceInterface_GetTTL_Call {
	return &RedisServiceInterface_GetTTL_Call{Call: _e.mock.On("GetTTL", key)}
}

func (_c *RedisServiceInterface_GetTTL_Call) Run(run func(key string)) *RedisServiceInterface_GetTTL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *RedisServiceInterface_GetTTL_Call) Return(_a0 time.Duration, _a1 error) *RedisServiceInterface_GetTTL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RedisServiceInterface_GetTTL_Call) RunAndReturn(run func(string) (time.Duration, error)) *RedisServiceInterface_GetTTL_Call {
	_c.Call.Return(run)
	return _c
}

// HDel provides a mock function with given fields: key, field
func (_m *RedisServiceInterface) HDel(key string, field string) error {
	ret := _m.Called(key, field)

	if len(ret) == 0 {
		panic("no return value specified for HDel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(key, field)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RedisServiceInterface_HDel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HDel'
type RedisServiceInterface_HDel_Call struct {
	*mock.Call
}

// HDel is a helper method to define mock.On call
//   - key string
//   - field string
func (_e *RedisServiceInterface_Expecter) HDel(key interface{}, field interface{}) *RedisServiceInterface_HDel_Call {
	return &RedisServiceInterface_HDel_Call{Call: _e.mock.On("HDel", key, field)}
}

func (_c *RedisServiceInterface_HDel_Call) Run(run func(key string, field string)) *RedisServiceInterface_HDel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *RedisServiceInterface_HDel_Call) Return(_a0 error) *RedisServiceInterface_HDel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RedisServiceInterface_HDel_Call) RunAndReturn(run func(string, string) error) *RedisServiceInterface_HDel_Call {
	_c.Call.Return(run)
	return _c
}

// HGet provides a mock function with given fields: key, field
func (_m *RedisServiceInterface) HGet(key string, field string) (string, error) {
	ret := _m.Called(key, field)

	if len(ret) == 0 {
		panic("no return value specified for HGet")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(key, field)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(key, field)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(key, field)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RedisServiceInterface_HGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HGet'
type RedisServiceInterface_HGet_Call struct {
	*mock.Call
}

// HGet is a helper method to define mock.On call
//   - key string
//   - field string
func (_e *RedisServiceInterface_Expecter) HGet(key interface{}, field interface{}) *RedisServiceInterface_HGet_Call {
	return &RedisServiceInterface_HGet_Call{Call: _e.mock.On("HGet", key, field)}
}

func (_c *RedisServiceInterface_HGet_Call) Run(run func(key string, field string)) *RedisServiceInterface_HGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *RedisServiceInterface_HGet_Call) Return(_a0 string, _a1 error) *RedisServiceInterface_HGet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RedisServiceInterface_HGet_Call) RunAndReturn(run func(string, string) (string, error)) *RedisServiceInterface_HGet_Call {
	_c.Call.Return(run)
	return _c
}

// HGetAll provides a mock function with given fields: key
func (_m *RedisServiceInterface) HGetAll(key string) (map[string]string, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for HGetAll")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (map[string]string, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) map[string]string); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RedisServiceInterface_HGetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HGetAll'
type RedisServiceInterface_HGetAll_Call struct {
	*mock.Call
}

// HGetAll is a helper method to define mock.On call
//   - key string
func (_e *RedisServiceInterface_Expecter) HGetAll(key interface{}) *RedisServiceInterface_HGetAll_Call {
	return &RedisServiceInterface_HGetAll_Call{Call: _e.mock.On("HGetAll", key)}
}

func (_c *RedisServiceInterface_HGetAll_Call) Run(run func(key string)) *RedisServiceInterface_HGetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *RedisServiceInterface_HGetAll_Call) Return(_a0 map[string]string, _a1 error) *RedisServiceInterface_HGetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RedisServiceInterface_HGetAll_Call) RunAndReturn(run func(string) (map[string]string, error)) *RedisServiceInterface_HGetAll_Call {
	_c.Call.Return(run)
	return _c
}

// HSet provides a mock function with given fields: key, field, value
func (_m *RedisServiceInterface) HSet(key string, field string, value interface{}) error {
	ret := _m.Called(key, field, value)

	if len(ret) == 0 {
		panic("no return value specified for HSet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, interface{}) error); ok {
		r0 = rf(key, field, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RedisServiceInterface_HSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HSet'
type RedisServiceInterface_HSet_Call struct {
	*mock.Call
}

// HSet is a helper method to define mock.On call
//   - key string
//   - field string
//   - value interface{}
func (_e *RedisServiceInterface_Expecter) HSet(key interface{}, field interface{}, value interface{}) *RedisServiceInterface_HSet_Call {
	return &RedisServiceInterface_HSet_Call{Call: _e.mock.On("HSet", key, field, value)}
}

func (_c *RedisServiceInterface_HSet_Call) Run(run func(key string, field string, value interface{})) *RedisServiceInterface_HSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *RedisServiceInterface_HSet_Call) Return(_a0 error) *RedisServiceInterface_HSet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RedisServiceInterface_HSet_Call) RunAndReturn(run func(string, string, interface{}) error) *RedisServiceInterface_HSet_Call {
	_c.Call.Return(run)
	return _c
}

// Increment provides a mock function with given fields: key
func (_m *RedisServiceInterface) Increment(key string) (int64, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Increment")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int64, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RedisServiceInterface_Increment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Increment'
type RedisServiceInterface_Increment_Call struct {
	*mock.Call
}

// Increment is a helper method to define mock.On call
//   - key string
func (_e *RedisServiceInterface_Expecter) Increment(key interface{}) *RedisServiceInterface_Increment_Call {
	return &RedisServiceInterface_Increment_Call{Call: _e.mock.On("Increment", key)}
}

func (_c *RedisServiceInterface_Increment_Call) Run(run func(key string)) *RedisServiceInterface_Increment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *RedisServiceInterface_Increment_Call) Return(_a0 int64, _a1 error) *RedisServiceInterface_Increment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RedisServiceInterface_Increment_Call) RunAndReturn(run func(string) (int64, error)) *RedisServiceInterface_Increment_Call {
	_c.Call.Return(run)
	return _c
}

// LLen provides a mock function with given fields: key
func (_m *RedisServiceInterface) LLen(key string) (int64, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for LLen")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int64, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RedisServiceInterface_LLen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LLen'
type RedisServiceInterface_LLen_Call struct {
	*mock.Call
}

// LLen is a helper method to define mock.On call
//   - key string
func (_e *RedisServiceInterface_Expecter) LLen(key interface{}) *RedisServiceInterface_LLen_Call {
	return &RedisServiceInterface_LLen_Call{Call: _e.mock.On("LLen", key)}
}

func (_c *RedisServiceInterface_LLen_Call) Run(run func(key string)) *RedisServiceInterface_LLen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *RedisServiceInterface_LLen_Call) Return(_a0 int64, _a1 error) *RedisServiceInterface_LLen_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RedisServiceInterface_LLen_Call) RunAndReturn(run func(string) (int64, error)) *RedisServiceInterface_LLen_Call {
	_c.Call.Return(run)
	return _c
}

// LPop provides a mock function with given fields: key
func (_m *RedisServiceInterface) LPop(key string) (string, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for LPop")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RedisServiceInterface_LPop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LPop'
type RedisServiceInterface_LPop_Call struct {
	*mock.Call
}

// LPop is a helper method to define mock.On call
//   - key string
func (_e *RedisServiceInterface_Expecter) LPop(key interface{}) *RedisServiceInterface_LPop_Call {
	return &RedisServiceInterface_LPop_Call{Call: _e.mock.On("LPop", key)}
}

func (_c *RedisServiceInterface_LPop_Call) Run(run func(key string)) *RedisServiceInterface_LPop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *RedisServiceInterface_LPop_Call) Return(_a0 string, _a1 error) *RedisServiceInterface_LPop_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RedisServiceInterface_LPop_Call) RunAndReturn(run func(string) (string, error)) *RedisServiceInterface_LPop_Call {
	_c.Call.Return(run)
	return _c
}

// LPush provides a mock function with given fields: key, value
func (_m *RedisServiceInterface) LPush(key string, value interface{}) error {
	ret := _m.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for LPush")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RedisServiceInterface_LPush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LPush'
type RedisServiceInterface_LPush_Call struct {
	*mock.Call
}

// LPush is a helper method to define mock.On call
//   - key string
//   - value interface{}
func (_e *RedisServiceInterface_Expecter) LPush(key interface{}, value interface{}) *RedisServiceInterface_LPush_Call {
	return &RedisServiceInterface_LPush_Call{Call: _e.mock.On("LPush", key, value)}
}

func (_c *RedisServiceInterface_LPush_Call) Run(run func(key string, value interface{})) *RedisServiceInterface_LPush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *RedisServiceInterface_LPush_Call) Return(_a0 error) *RedisServiceInterface_LPush_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RedisServiceInterface_LPush_Call) RunAndReturn(run func(string, interface{}) error) *RedisServiceInterface_LPush_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function with no fields
func (_m *RedisServiceInterface) Ping() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RedisServiceInterface_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type RedisServiceInterface_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
func (_e *RedisServiceInterface_Expecter) Ping() *RedisServiceInterface_Ping_Call {
	return &RedisServiceInterface_Ping_Call{Call: _e.mock.On("Ping")}
}

func (_c *RedisServiceInterface_Ping_Call) Run(run func()) *RedisServiceInterface_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RedisServiceInterface_Ping_Call) Return(_a0 error) *RedisServiceInterface_Ping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RedisServiceInterface_Ping_Call) RunAndReturn(run func() error) *RedisServiceInterface_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// RPop provides a mock function with given fields: key
func (_m *RedisServiceInterface) RPop(key string) (string, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for RPop")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RedisServiceInterface_RPop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RPop'
type RedisServiceInterface_RPop_Call struct {
	*mock.Call
}

// RPop is a helper method to define mock.On call
//   - key string
func (_e *RedisServiceInterface_Expecter) RPop(key interface{}) *RedisServiceInterface_RPop_Call {
	return &RedisServiceInterface_RPop_Call{Call: _e.mock.On("RPop", key)}
}

func (_c *RedisServiceInterface_RPop_Call) Run(run func(key string)) *RedisServiceInterface_RPop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *RedisServiceInterface_RPop_Call) Return(_a0 string, _a1 error) *RedisServiceInterface_RPop_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RedisServiceInterface_RPop_Call) RunAndReturn(run func(string) (string, error)) *RedisServiceInterface_RPop_Call {
	_c.Call.Return(run)
	return _c
}

// RPush provides a mock function with given fields: key, value
func (_m *RedisServiceInterface) RPush(key string, value interface{}) error {
	ret := _m.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for RPush")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RedisServiceInterface_RPush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RPush'
type RedisServiceInterface_RPush_Call struct {
	*mock.Call
}

// RPush is a helper method to define mock.On call
//   - key string
//   - value interface{}
func (_e *RedisServiceInterface_Expecter) RPush(key interface{}, value interface{}) *RedisServiceInterface_RPush_Call {
	return &RedisServiceInterface_RPush_Call{Call: _e.mock.On("RPush", key, value)}
}

func (_c *RedisServiceInterface_RPush_Call) Run(run func(key string, value interface{})) *RedisServiceInterface_RPush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *RedisServiceInterface_RPush_Call) Return(_a0 error) *RedisServiceInterface_RPush_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RedisServiceInterface_RPush_Call) RunAndReturn(run func(string, interface{}) error) *RedisServiceInterface_RPush_Call {
	_c.Call.Return(run)
	return _c
}

// SAdd provides a mock function with given fields: key, members
func (_m *RedisServiceInterface) SAdd(key string, members ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, members...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SAdd")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...interface{}) error); ok {
		r0 = rf(key, members...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RedisServiceInterface_SAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SAdd'
type RedisServiceInterface_SAdd_Call struct {
	*mock.Call
}

// SAdd is a helper method to define mock.On call
//   - key string
//   - members ...interface{}
func (_e *RedisServiceInterface_Expecter) SAdd(key interface{}, members ...interface{}) *RedisServiceInterface_SAdd_Call {
	return &RedisServiceInterface_SAdd_Call{Call: _e.mock.On("SAdd",
		append([]interface{}{key}, members...)...)}
}

func (_c *RedisServiceInterface_SAdd_Call) Run(run func(key string, members ...interface{})) *RedisServiceInterface_SAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *RedisServiceInterface_SAdd_Call) Return(_a0 error) *RedisServiceInterface_SAdd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RedisServiceInterface_SAdd_Call) RunAndReturn(run func(string, ...interface{}) error) *RedisServiceInterface_SAdd_Call {
	_c.Call.Return(run)
	return _c
}

// SIsMember provides a mock function with given fields: key, member
func (_m *RedisServiceInterface) SIsMember(key string, member interface{}) (bool, error) {
	ret := _m.Called(key, member)

	if len(ret) == 0 {
		panic("no return value specified for SIsMember")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, interface{}) (bool, error)); ok {
		return rf(key, member)
	}
	if rf, ok := ret.Get(0).(func(string, interface{}) bool); ok {
		r0 = rf(key, member)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, interface{}) error); ok {
		r1 = rf(key, member)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RedisServiceInterface_SIsMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SIsMember'
type RedisServiceInterface_SIsMember_Call struct {
	*mock.Call
}

// SIsMember is a helper method to define mock.On call
//   - key string
//   - member interface{}
func (_e *RedisServiceInterface_Expecter) SIsMember(key interface{}, member interface{}) *RedisServiceInterface_SIsMember_Call {
	return &RedisServiceInterface_SIsMember_Call{Call: _e.mock.On("SIsMember", key, member)}
}

func (_c *RedisServiceInterface_SIsMember_Call) Run(run func(key string, member interface{})) *RedisServiceInterface_SIsMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *RedisServiceInterface_SIsMember_Call) Return(_a0 bool, _a1 error) *RedisServiceInterface_SIsMember_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RedisServiceInterface_SIsMember_Call) RunAndReturn(run func(string, interface{}) (bool, error)) *RedisServiceInterface_SIsMember_Call {
	_c.Call.Return(run)
	return _c
}

// SMembers provides a mock function with given fields: key
func (_m *RedisServiceInterface) SMembers(key string) ([]string, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for SMembers")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RedisServiceInterface_SMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SMembers'
type RedisServiceInterface_SMembers_Call struct {
	*mock.Call
}

// SMembers is a helper method to define mock.On call
//   - key string
func (_e *RedisServiceInterface_Expecter) SMembers(key interface{}) *RedisServiceInterface_SMembers_Call {
	return &RedisServiceInterface_SMembers_Call{Call: _e.mock.On("SMembers", key)}
}

func (_c *RedisServiceInterface_SMembers_Call) Run(run func(key string)) *RedisServiceInterface_SMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *RedisServiceInterface_SMembers_Call) Return(_a0 []string, _a1 error) *RedisServiceInterface_SMembers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RedisServiceInterface_SMembers_Call) RunAndReturn(run func(string) ([]string, error)) *RedisServiceInterface_SMembers_Call {
	_c.Call.Return(run)
	return _c
}

// SRem provides a mock function with given fields: key, members
func (_m *RedisServiceInterface) SRem(key string, members ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, members...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SRem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...interface{}) error); ok {
		r0 = rf(key, members...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RedisServiceInterface_SRem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SRem'
type RedisServiceInterface_SRem_Call struct {
	*mock.Call
}

// SRem is a helper method to define mock.On call
//   - key string
//   - members ...interface{}
func (_e *RedisServiceInterface_Expecter) SRem(key interface{}, members ...interface{}) *RedisServiceInterface_SRem_Call {
	return &RedisServiceInterface_SRem_Call{Call: _e.mock.On("SRem",
		append([]interface{}{key}, members...)...)}
}

func (_c *RedisServiceInterface_SRem_Call) Run(run func(key string, members ...interface{})) *RedisServiceInterface_SRem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *RedisServiceInterface_SRem_Call) Return(_a0 error) *RedisServiceInterface_SRem_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RedisServiceInterface_SRem_Call) RunAndReturn(run func(string, ...interface{}) error) *RedisServiceInterface_SRem_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: key, value, expiration
func (_m *RedisServiceInterface) Set(key string, value interface{}, expiration time.Duration) error {
	ret := _m.Called(key, value, expiration)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}, time.Duration) error); ok {
		r0 = rf(key, value, expiration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RedisServiceInterface_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type RedisServiceInterface_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - key string
//   - value interface{}
//   - expiration time.Duration
func (_e *RedisServiceInterface_Expecter) Set(key interface{}, value interface{}, expiration interface{}) *RedisServiceInterface_Set_Call {
	return &RedisServiceInterface_Set_Call{Call: _e.mock.On("Set", key, value, expiration)}
}

func (_c *RedisServiceInterface_Set_Call) Run(run func(key string, value interface{}, expiration time.Duration)) *RedisServiceInterface_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}), args[2].(time.Duration))
	})
	return _c
}

func (_c *RedisServiceInterface_Set_Call) Return(_a0 error) *RedisServiceInterface_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RedisServiceInterface_Set_Call) RunAndReturn(run func(string, interface{}, time.Duration) error) *RedisServiceInterface_Set_Call {
	_c.Call.Return(run)
	return _c
}

// SetJSON provides a mock function with given fields: key, value, expiration
func (_m *RedisServiceInterface) SetJSON(key string, value interface{}, expiration time.Duration) error {
	ret := _m.Called(key, value, expiration)

	if len(ret) == 0 {
		panic("no return value specified for SetJSON")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}, time.Duration) error); ok {
		r0 = rf(key, value, expiration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RedisServiceInterface_SetJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetJSON'
type RedisServiceInterface_SetJSON_Call struct {
	*mock.Call
}

// SetJSON is a helper method to define mock.On call
//   - key string
//   - value interface{}
//   - expiration time.Duration
func (_e *RedisServiceInterface_Expecter) SetJSON(key interface{}, value interface{}, expiration interface{}) *RedisServiceInterface_SetJSON_Call {
	return &RedisServiceInterface_SetJSON_Call{Call: _e.mock.On("SetJSON", key, value, expiration)}
}

func (_c *RedisServiceInterface_SetJSON_Call) Run(run func(key string, value interface{}, expiration time.Duration)) *RedisServiceInterface_SetJSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}), args[2].(time.Duration))
	})
	return _c
}

func (_c *RedisServiceInterface_SetJSON_Call) Return(_a0 error) *RedisServiceInterface_SetJSON_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RedisServiceInterface_SetJSON_Call) RunAndReturn(run func(string, interface{}, time.Duration) error) *RedisServiceInterface_SetJSON_Call {
	_c.Call.Return(run)
	return _c
}

// SetTTL provides a mock function with given fields: key, expiration
func (_m *RedisServiceInterface) SetTTL(key string, expiration time.Duration) error {
	ret := _m.Called(key, expiration)

	if len(ret) == 0 {
		panic("no return value specified for SetTTL")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, time.Duration) error); ok {
		r0 = rf(key, expiration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RedisServiceInterface_SetTTL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTTL'
type RedisServiceInterface_SetTTL_Call struct {
	*mock.Call
}

// SetTTL is a helper method to define mock.On call
//   - key string
//   - expiration time.Duration
func (_e *RedisServiceInterface_Expecter) SetTTL(key interface{}, expiration interface{}) *RedisServiceInterface_SetTTL_Call {
	return &RedisServiceInterface_SetTTL_Call{Call: _e.mock.On("SetTTL", key, expiration)}
}

func (_c *RedisServiceInterface_SetTTL_Call) Run(run func(key string, expiration time.Duration)) *RedisServiceInterface_SetTTL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(time.Duration))
	})
	return _c
}

func (_c *RedisServiceInterface_SetTTL_Call) Return(_a0 error) *RedisServiceInterface_SetTTL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RedisServiceInterface_SetTTL_Call) RunAndReturn(run func(string, time.Duration) error) *RedisServiceInterface_SetTTL_Call {
	_c.Call.Return(run)
	return _c
}

// NewRedisServiceInterface creates a new instance of RedisServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRedisServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *RedisServiceInterface {
	mock := &RedisServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
