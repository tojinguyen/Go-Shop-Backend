// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: cart_items.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addItemToCart = `-- name: AddItemToCart :one
INSERT INTO cart_items (cart_id, shop_id, product_id, quantity)
VALUES ($1, $2, $3, $4)
RETURNING id, cart_id, shop_id, product_id, quantity, created_at, updated_at
`

type AddItemToCartParams struct {
	CartID    pgtype.UUID `json:"cart_id"`
	ShopID    pgtype.UUID `json:"shop_id"`
	ProductID pgtype.UUID `json:"product_id"`
	Quantity  int32       `json:"quantity"`
}

func (q *Queries) AddItemToCart(ctx context.Context, arg AddItemToCartParams) (CartItem, error) {
	row := q.db.QueryRow(ctx, addItemToCart,
		arg.CartID,
		arg.ShopID,
		arg.ProductID,
		arg.Quantity,
	)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.CartID,
		&i.ShopID,
		&i.ProductID,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAllItemsFromCart = `-- name: DeleteAllItemsFromCart :exec
DELETE FROM cart_items
WHERE cart_id = $1
`

func (q *Queries) DeleteAllItemsFromCart(ctx context.Context, cartID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteAllItemsFromCart, cartID)
	return err
}

const deleteItemFromCart = `-- name: DeleteItemFromCart :exec
DELETE FROM cart_items
WHERE id = $1
`

func (q *Queries) DeleteItemFromCart(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteItemFromCart, id)
	return err
}

const getItemsByCartID = `-- name: GetItemsByCartID :many
SELECT id, cart_id, shop_id, product_id, quantity, created_at, updated_at FROM cart_items
WHERE cart_id = $1
`

func (q *Queries) GetItemsByCartID(ctx context.Context, cartID pgtype.UUID) ([]CartItem, error) {
	rows, err := q.db.Query(ctx, getItemsByCartID, cartID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CartItem{}
	for rows.Next() {
		var i CartItem
		if err := rows.Scan(
			&i.ID,
			&i.CartID,
			&i.ShopID,
			&i.ProductID,
			&i.Quantity,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateItemQuantity = `-- name: UpdateItemQuantity :one
UPDATE cart_items
SET quantity = $2, updated_at = NOW()
WHERE id = $1
RETURNING id, cart_id, shop_id, product_id, quantity, created_at, updated_at
`

type UpdateItemQuantityParams struct {
	ID       pgtype.UUID `json:"id"`
	Quantity int32       `json:"quantity"`
}

func (q *Queries) UpdateItemQuantity(ctx context.Context, arg UpdateItemQuantityParams) (CartItem, error) {
	row := q.db.QueryRow(ctx, updateItemQuantity, arg.ID, arg.Quantity)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.CartID,
		&i.ShopID,
		&i.ProductID,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertItemInCart = `-- name: UpsertItemInCart :one
INSERT INTO cart_items (cart_id, shop_id, product_id, quantity)
VALUES ($1, $2, $3, $4)
ON CONFLICT (cart_id, product_id) DO UPDATE 
SET quantity = EXCLUDED.quantity, updated_at = NOW()
RETURNING id, cart_id, shop_id, product_id, quantity, created_at, updated_at
`

type UpsertItemInCartParams struct {
	CartID    pgtype.UUID `json:"cart_id"`
	ShopID    pgtype.UUID `json:"shop_id"`
	ProductID pgtype.UUID `json:"product_id"`
	Quantity  int32       `json:"quantity"`
}

func (q *Queries) UpsertItemInCart(ctx context.Context, arg UpsertItemInCartParams) (CartItem, error) {
	row := q.db.QueryRow(ctx, upsertItemInCart,
		arg.CartID,
		arg.ShopID,
		arg.ProductID,
		arg.Quantity,
	)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.CartID,
		&i.ShopID,
		&i.ProductID,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
