// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: payment_refund.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRefundPayment = `-- name: CreateRefundPayment :one
INSERT INTO refund_payments (
    payment_id,
    order_id,
    amount,
    reason,
    provider_refund_id,
    refund_status
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, payment_id, order_id, amount, reason, provider_refund_id, refund_status, created_at, updated_at
`

type CreateRefundPaymentParams struct {
	PaymentID        pgtype.UUID    `json:"payment_id"`
	OrderID          pgtype.UUID    `json:"order_id"`
	Amount           pgtype.Numeric `json:"amount"`
	Reason           pgtype.Text    `json:"reason"`
	ProviderRefundID pgtype.Text    `json:"provider_refund_id"`
	RefundStatus     RefundStatus   `json:"refund_status"`
}

func (q *Queries) CreateRefundPayment(ctx context.Context, arg CreateRefundPaymentParams) (RefundPayment, error) {
	row := q.db.QueryRow(ctx, createRefundPayment,
		arg.PaymentID,
		arg.OrderID,
		arg.Amount,
		arg.Reason,
		arg.ProviderRefundID,
		arg.RefundStatus,
	)
	var i RefundPayment
	err := row.Scan(
		&i.ID,
		&i.PaymentID,
		&i.OrderID,
		&i.Amount,
		&i.Reason,
		&i.ProviderRefundID,
		&i.RefundStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRefundPaymentByID = `-- name: GetRefundPaymentByID :one
SELECT id, payment_id, order_id, amount, reason, provider_refund_id, refund_status, created_at, updated_at FROM refund_payments WHERE id = $1
`

func (q *Queries) GetRefundPaymentByID(ctx context.Context, id pgtype.UUID) (RefundPayment, error) {
	row := q.db.QueryRow(ctx, getRefundPaymentByID, id)
	var i RefundPayment
	err := row.Scan(
		&i.ID,
		&i.PaymentID,
		&i.OrderID,
		&i.Amount,
		&i.Reason,
		&i.ProviderRefundID,
		&i.RefundStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateRefundPaymentStatus = `-- name: UpdateRefundPaymentStatus :one
UPDATE refund_payments SET refund_status = $2 WHERE id = $1 RETURNING id, payment_id, order_id, amount, reason, provider_refund_id, refund_status, created_at, updated_at
`

type UpdateRefundPaymentStatusParams struct {
	ID           pgtype.UUID  `json:"id"`
	RefundStatus RefundStatus `json:"refund_status"`
}

func (q *Queries) UpdateRefundPaymentStatus(ctx context.Context, arg UpdateRefundPaymentStatusParams) (RefundPayment, error) {
	row := q.db.QueryRow(ctx, updateRefundPaymentStatus, arg.ID, arg.RefundStatus)
	var i RefundPayment
	err := row.Scan(
		&i.ID,
		&i.PaymentID,
		&i.OrderID,
		&i.Amount,
		&i.Reason,
		&i.ProviderRefundID,
		&i.RefundStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
