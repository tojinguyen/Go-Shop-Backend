// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package sqlc

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type OutboxEventStatus string

const (
	OutboxEventStatusPENDING OutboxEventStatus = "PENDING"
	OutboxEventStatusSENT    OutboxEventStatus = "SENT"
	OutboxEventStatusFAILED  OutboxEventStatus = "FAILED"
)

func (e *OutboxEventStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OutboxEventStatus(s)
	case string:
		*e = OutboxEventStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for OutboxEventStatus: %T", src)
	}
	return nil
}

type NullOutboxEventStatus struct {
	OutboxEventStatus OutboxEventStatus `json:"outbox_event_status"`
	Valid             bool              `json:"valid"` // Valid is true if OutboxEventStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOutboxEventStatus) Scan(value interface{}) error {
	if value == nil {
		ns.OutboxEventStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OutboxEventStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOutboxEventStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OutboxEventStatus), nil
}

type PaymentMethod string

const (
	PaymentMethodCOD          PaymentMethod = "COD"
	PaymentMethodCREDITCARD   PaymentMethod = "CREDIT_CARD"
	PaymentMethodBANKTRANSFER PaymentMethod = "BANK_TRANSFER"
	PaymentMethodEWALLET      PaymentMethod = "E_WALLET"
)

func (e *PaymentMethod) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentMethod(s)
	case string:
		*e = PaymentMethod(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentMethod: %T", src)
	}
	return nil
}

type NullPaymentMethod struct {
	PaymentMethod PaymentMethod `json:"payment_method"`
	Valid         bool          `json:"valid"` // Valid is true if PaymentMethod is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentMethod) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentMethod, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentMethod.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentMethod) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentMethod), nil
}

type PaymentStatus string

const (
	PaymentStatusPENDING    PaymentStatus = "PENDING"
	PaymentStatusPROCESSING PaymentStatus = "PROCESSING"
	PaymentStatusSUCCESS    PaymentStatus = "SUCCESS"
	PaymentStatusFAILED     PaymentStatus = "FAILED"
	PaymentStatusREFUNDED   PaymentStatus = "REFUNDED"
)

func (e *PaymentStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentStatus(s)
	case string:
		*e = PaymentStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentStatus: %T", src)
	}
	return nil
}

type NullPaymentStatus struct {
	PaymentStatus PaymentStatus `json:"payment_status"`
	Valid         bool          `json:"valid"` // Valid is true if PaymentStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentStatus) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentStatus), nil
}

type Payment struct {
	ID                    pgtype.UUID        `json:"id"`
	OrderID               pgtype.UUID        `json:"order_id"`
	UserID                pgtype.UUID        `json:"user_id"`
	Amount                pgtype.Numeric     `json:"amount"`
	Currency              string             `json:"currency"`
	PaymentMethod         PaymentMethod      `json:"payment_method"`
	PaymentProvider       pgtype.Text        `json:"payment_provider"`
	ProviderTransactionID pgtype.Text        `json:"provider_transaction_id"`
	PaymentStatus         PaymentStatus      `json:"payment_status"`
	CreatedAt             pgtype.Timestamptz `json:"created_at"`
	UpdatedAt             pgtype.Timestamptz `json:"updated_at"`
}

type PaymentOutboxEvent struct {
	ID          pgtype.UUID        `json:"id"`
	PaymentID   pgtype.UUID        `json:"payment_id"`
	OrderID     pgtype.UUID        `json:"order_id"`
	EventType   string             `json:"event_type"`
	Payload     []byte             `json:"payload"`
	EventStatus OutboxEventStatus  `json:"event_status"`
	RetryCount  int32              `json:"retry_count"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}
