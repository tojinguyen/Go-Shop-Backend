// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: payment_event.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPaymentEvent = `-- name: CreatePaymentEvent :one
INSERT INTO payment_outbox_events (
    payment_id,
    order_id,
    event_type,
    payload,
    event_status
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, payment_id, order_id, event_type, payload, event_status, retry_count, created_at, updated_at
`

type CreatePaymentEventParams struct {
	PaymentID   pgtype.UUID       `json:"payment_id"`
	OrderID     pgtype.UUID       `json:"order_id"`
	EventType   string            `json:"event_type"`
	Payload     []byte            `json:"payload"`
	EventStatus OutboxEventStatus `json:"event_status"`
}

func (q *Queries) CreatePaymentEvent(ctx context.Context, arg CreatePaymentEventParams) (PaymentOutboxEvent, error) {
	row := q.db.QueryRow(ctx, createPaymentEvent,
		arg.PaymentID,
		arg.OrderID,
		arg.EventType,
		arg.Payload,
		arg.EventStatus,
	)
	var i PaymentOutboxEvent
	err := row.Scan(
		&i.ID,
		&i.PaymentID,
		&i.OrderID,
		&i.EventType,
		&i.Payload,
		&i.EventStatus,
		&i.RetryCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBatchPaymentEventsByEventTypeAndStatus = `-- name: GetBatchPaymentEventsByEventTypeAndStatus :many
SELECT id, payment_id, order_id, event_type, payload, event_status, retry_count, created_at, updated_at FROM payment_outbox_events
WHERE event_type = $1 AND event_status = $2
ORDER BY created_at ASC
LIMIT $3
`

type GetBatchPaymentEventsByEventTypeAndStatusParams struct {
	EventType   string            `json:"event_type"`
	EventStatus OutboxEventStatus `json:"event_status"`
	Limit       int32             `json:"limit"`
}

func (q *Queries) GetBatchPaymentEventsByEventTypeAndStatus(ctx context.Context, arg GetBatchPaymentEventsByEventTypeAndStatusParams) ([]PaymentOutboxEvent, error) {
	rows, err := q.db.Query(ctx, getBatchPaymentEventsByEventTypeAndStatus, arg.EventType, arg.EventStatus, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PaymentOutboxEvent{}
	for rows.Next() {
		var i PaymentOutboxEvent
		if err := rows.Scan(
			&i.ID,
			&i.PaymentID,
			&i.OrderID,
			&i.EventType,
			&i.Payload,
			&i.EventStatus,
			&i.RetryCount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePaymentEvent = `-- name: UpdatePaymentEvent :one
UPDATE payment_outbox_events
SET
    event_status = $2,
    payload = $3,
    retry_count = $4,
    updated_at = NOW()
WHERE id = $1
RETURNING id, payment_id, order_id, event_type, payload, event_status, retry_count, created_at, updated_at
`

type UpdatePaymentEventParams struct {
	ID          pgtype.UUID       `json:"id"`
	EventStatus OutboxEventStatus `json:"event_status"`
	Payload     []byte            `json:"payload"`
	RetryCount  int32             `json:"retry_count"`
}

func (q *Queries) UpdatePaymentEvent(ctx context.Context, arg UpdatePaymentEventParams) (PaymentOutboxEvent, error) {
	row := q.db.QueryRow(ctx, updatePaymentEvent,
		arg.ID,
		arg.EventStatus,
		arg.Payload,
		arg.RetryCount,
	)
	var i PaymentOutboxEvent
	err := row.Scan(
		&i.ID,
		&i.PaymentID,
		&i.OrderID,
		&i.EventType,
		&i.Payload,
		&i.EventStatus,
		&i.RetryCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
