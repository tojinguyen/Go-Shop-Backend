// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: payment.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO payments (
    order_id,
    user_id,
    amount,
    currency,
    payment_method,
    payment_provider,
    payment_status
) VALUES (
    $1, $2, $3, $4, $5, $6, 'PENDING'
) RETURNING id, order_id, user_id, amount, currency, payment_method, payment_provider, provider_transaction_id, payment_status, created_at, updated_at, provider_refund_id
`

type CreatePaymentParams struct {
	OrderID         pgtype.UUID    `json:"order_id"`
	UserID          pgtype.UUID    `json:"user_id"`
	Amount          pgtype.Numeric `json:"amount"`
	Currency        string         `json:"currency"`
	PaymentMethod   PaymentMethod  `json:"payment_method"`
	PaymentProvider pgtype.Text    `json:"payment_provider"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error) {
	row := q.db.QueryRow(ctx, createPayment,
		arg.OrderID,
		arg.UserID,
		arg.Amount,
		arg.Currency,
		arg.PaymentMethod,
		arg.PaymentProvider,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.UserID,
		&i.Amount,
		&i.Currency,
		&i.PaymentMethod,
		&i.PaymentProvider,
		&i.ProviderTransactionID,
		&i.PaymentStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProviderRefundID,
	)
	return i, err
}

const getPaymentByOrderID = `-- name: GetPaymentByOrderID :one
SELECT id, order_id, user_id, amount, currency, payment_method, payment_provider, provider_transaction_id, payment_status, created_at, updated_at, provider_refund_id FROM payments
WHERE order_id = $1
`

func (q *Queries) GetPaymentByOrderID(ctx context.Context, orderID pgtype.UUID) (Payment, error) {
	row := q.db.QueryRow(ctx, getPaymentByOrderID, orderID)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.UserID,
		&i.Amount,
		&i.Currency,
		&i.PaymentMethod,
		&i.PaymentProvider,
		&i.ProviderTransactionID,
		&i.PaymentStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProviderRefundID,
	)
	return i, err
}

const updatePaymentProviderRefundID = `-- name: UpdatePaymentProviderRefundID :one
UPDATE payments
SET
    provider_refund_id = $2,
    updated_at = NOW()
WHERE id = $1
RETURNING id, order_id, user_id, amount, currency, payment_method, payment_provider, provider_transaction_id, payment_status, created_at, updated_at, provider_refund_id
`

type UpdatePaymentProviderRefundIDParams struct {
	ID               pgtype.UUID `json:"id"`
	ProviderRefundID pgtype.Text `json:"provider_refund_id"`
}

func (q *Queries) UpdatePaymentProviderRefundID(ctx context.Context, arg UpdatePaymentProviderRefundIDParams) (Payment, error) {
	row := q.db.QueryRow(ctx, updatePaymentProviderRefundID, arg.ID, arg.ProviderRefundID)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.UserID,
		&i.Amount,
		&i.Currency,
		&i.PaymentMethod,
		&i.PaymentProvider,
		&i.ProviderTransactionID,
		&i.PaymentStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProviderRefundID,
	)
	return i, err
}

const updatePaymentStatus = `-- name: UpdatePaymentStatus :one
UPDATE payments
SET
    payment_status = $2,
    provider_transaction_id = $3,
    updated_at = NOW()
WHERE id = $1
RETURNING id, order_id, user_id, amount, currency, payment_method, payment_provider, provider_transaction_id, payment_status, created_at, updated_at, provider_refund_id
`

type UpdatePaymentStatusParams struct {
	ID                    pgtype.UUID   `json:"id"`
	PaymentStatus         PaymentStatus `json:"payment_status"`
	ProviderTransactionID pgtype.Text   `json:"provider_transaction_id"`
}

func (q *Queries) UpdatePaymentStatus(ctx context.Context, arg UpdatePaymentStatusParams) (Payment, error) {
	row := q.db.QueryRow(ctx, updatePaymentStatus, arg.ID, arg.PaymentStatus, arg.ProviderTransactionID)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.UserID,
		&i.Amount,
		&i.Currency,
		&i.PaymentMethod,
		&i.PaymentProvider,
		&i.ProviderTransactionID,
		&i.PaymentStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProviderRefundID,
	)
	return i, err
}
