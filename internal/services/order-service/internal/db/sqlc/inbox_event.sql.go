// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: inbox_event.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const cleanupOldInboxEvents = `-- name: CleanupOldInboxEvents :exec
DELETE FROM order_inbox_events
WHERE event_status = 'PROCESSED' 
AND processed_at < NOW() - INTERVAL '30 days'
`

func (q *Queries) CleanupOldInboxEvents(ctx context.Context) error {
	_, err := q.db.Exec(ctx, cleanupOldInboxEvents)
	return err
}

const createInboxEvent = `-- name: CreateInboxEvent :one
INSERT INTO order_inbox_events (
    event_id,
    event_type,
    source_service,
    payload,
    event_status
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, event_id, event_type, source_service, payload, event_status, retry_count, max_retry, received_at, processed_at, created_at, updated_at
`

type CreateInboxEventParams struct {
	EventID       string           `json:"event_id"`
	EventType     string           `json:"event_type"`
	SourceService string           `json:"source_service"`
	Payload       []byte           `json:"payload"`
	EventStatus   InboxEventStatus `json:"event_status"`
}

func (q *Queries) CreateInboxEvent(ctx context.Context, arg CreateInboxEventParams) (OrderInboxEvent, error) {
	row := q.db.QueryRow(ctx, createInboxEvent,
		arg.EventID,
		arg.EventType,
		arg.SourceService,
		arg.Payload,
		arg.EventStatus,
	)
	var i OrderInboxEvent
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.EventType,
		&i.SourceService,
		&i.Payload,
		&i.EventStatus,
		&i.RetryCount,
		&i.MaxRetry,
		&i.ReceivedAt,
		&i.ProcessedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFailedInboxEvents = `-- name: GetFailedInboxEvents :many
SELECT id, event_id, event_type, source_service, payload, event_status, retry_count, max_retry, received_at, processed_at, created_at, updated_at FROM order_inbox_events
WHERE event_status = 'FAILED' AND retry_count < max_retry
ORDER BY received_at ASC
LIMIT $1
`

func (q *Queries) GetFailedInboxEvents(ctx context.Context, limit int32) ([]OrderInboxEvent, error) {
	rows, err := q.db.Query(ctx, getFailedInboxEvents, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrderInboxEvent{}
	for rows.Next() {
		var i OrderInboxEvent
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.EventType,
			&i.SourceService,
			&i.Payload,
			&i.EventStatus,
			&i.RetryCount,
			&i.MaxRetry,
			&i.ReceivedAt,
			&i.ProcessedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getInboxEventByEventId = `-- name: GetInboxEventByEventId :one
SELECT id, event_id, event_type, source_service, payload, event_status, retry_count, max_retry, received_at, processed_at, created_at, updated_at FROM order_inbox_events
WHERE event_id = $1
`

func (q *Queries) GetInboxEventByEventId(ctx context.Context, eventID string) (OrderInboxEvent, error) {
	row := q.db.QueryRow(ctx, getInboxEventByEventId, eventID)
	var i OrderInboxEvent
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.EventType,
		&i.SourceService,
		&i.Payload,
		&i.EventStatus,
		&i.RetryCount,
		&i.MaxRetry,
		&i.ReceivedAt,
		&i.ProcessedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getInboxEventStats = `-- name: GetInboxEventStats :one
SELECT 
    COUNT(*) FILTER (WHERE event_status = 'PENDING') as pending_count,
    COUNT(*) FILTER (WHERE event_status = 'PROCESSED') as processed_count,
    COUNT(*) FILTER (WHERE event_status = 'FAILED') as failed_count,
    COUNT(*) as total_count
FROM order_inbox_events
`

type GetInboxEventStatsRow struct {
	PendingCount   int64 `json:"pending_count"`
	ProcessedCount int64 `json:"processed_count"`
	FailedCount    int64 `json:"failed_count"`
	TotalCount     int64 `json:"total_count"`
}

func (q *Queries) GetInboxEventStats(ctx context.Context) (GetInboxEventStatsRow, error) {
	row := q.db.QueryRow(ctx, getInboxEventStats)
	var i GetInboxEventStatsRow
	err := row.Scan(
		&i.PendingCount,
		&i.ProcessedCount,
		&i.FailedCount,
		&i.TotalCount,
	)
	return i, err
}

const getPendingInboxEvents = `-- name: GetPendingInboxEvents :many
SELECT id, event_id, event_type, source_service, payload, event_status, retry_count, max_retry, received_at, processed_at, created_at, updated_at FROM order_inbox_events
WHERE event_status = 'PENDING'
ORDER BY received_at ASC
LIMIT $1
`

func (q *Queries) GetPendingInboxEvents(ctx context.Context, limit int32) ([]OrderInboxEvent, error) {
	rows, err := q.db.Query(ctx, getPendingInboxEvents, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrderInboxEvent{}
	for rows.Next() {
		var i OrderInboxEvent
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.EventType,
			&i.SourceService,
			&i.Payload,
			&i.EventStatus,
			&i.RetryCount,
			&i.MaxRetry,
			&i.ReceivedAt,
			&i.ProcessedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInboxEventStatus = `-- name: UpdateInboxEventStatus :one
UPDATE order_inbox_events
SET
    event_status = $2,
    retry_count = $3,
    processed_at = CASE 
        WHEN $2 = 'PROCESSED' THEN NOW() 
        ELSE processed_at 
    END,
    updated_at = NOW()
WHERE id = $1
RETURNING id, event_id, event_type, source_service, payload, event_status, retry_count, max_retry, received_at, processed_at, created_at, updated_at
`

type UpdateInboxEventStatusParams struct {
	ID          pgtype.UUID      `json:"id"`
	EventStatus InboxEventStatus `json:"event_status"`
	RetryCount  int32            `json:"retry_count"`
}

func (q *Queries) UpdateInboxEventStatus(ctx context.Context, arg UpdateInboxEventStatusParams) (OrderInboxEvent, error) {
	row := q.db.QueryRow(ctx, updateInboxEventStatus, arg.ID, arg.EventStatus, arg.RetryCount)
	var i OrderInboxEvent
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.EventType,
		&i.SourceService,
		&i.Payload,
		&i.EventStatus,
		&i.RetryCount,
		&i.MaxRetry,
		&i.ReceivedAt,
		&i.ProcessedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
