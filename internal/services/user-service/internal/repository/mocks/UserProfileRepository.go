// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "github.com/toji-dev/go-shop/internal/services/user-service/internal/domain"

	sqlc "github.com/toji-dev/go-shop/internal/services/user-service/internal/db/sqlc"
)

// UserProfileRepository is an autogenerated mock type for the UserProfileRepository type
type UserProfileRepository struct {
	mock.Mock
}

type UserProfileRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *UserProfileRepository) EXPECT() *UserProfileRepository_Expecter {
	return &UserProfileRepository_Expecter{mock: &_m.Mock}
}

// CreateUserProfile provides a mock function with given fields: ctx, params
func (_m *UserProfileRepository) CreateUserProfile(ctx context.Context, params sqlc.CreateUserProfileParams) (*domain.UserProfile, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserProfile")
	}

	var r0 *domain.UserProfile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.CreateUserProfileParams) (*domain.UserProfile, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.CreateUserProfileParams) *domain.UserProfile); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.UserProfile)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sqlc.CreateUserProfileParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserProfileRepository_CreateUserProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUserProfile'
type UserProfileRepository_CreateUserProfile_Call struct {
	*mock.Call
}

// CreateUserProfile is a helper method to define mock.On call
//   - ctx context.Context
//   - params sqlc.CreateUserProfileParams
func (_e *UserProfileRepository_Expecter) CreateUserProfile(ctx interface{}, params interface{}) *UserProfileRepository_CreateUserProfile_Call {
	return &UserProfileRepository_CreateUserProfile_Call{Call: _e.mock.On("CreateUserProfile", ctx, params)}
}

func (_c *UserProfileRepository_CreateUserProfile_Call) Run(run func(ctx context.Context, params sqlc.CreateUserProfileParams)) *UserProfileRepository_CreateUserProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sqlc.CreateUserProfileParams))
	})
	return _c
}

func (_c *UserProfileRepository_CreateUserProfile_Call) Return(_a0 *domain.UserProfile, _a1 error) *UserProfileRepository_CreateUserProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserProfileRepository_CreateUserProfile_Call) RunAndReturn(run func(context.Context, sqlc.CreateUserProfileParams) (*domain.UserProfile, error)) *UserProfileRepository_CreateUserProfile_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProfile provides a mock function with given fields: ctx, userID
func (_m *UserProfileRepository) DeleteProfile(ctx context.Context, userID string) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProfile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserProfileRepository_DeleteProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProfile'
type UserProfileRepository_DeleteProfile_Call struct {
	*mock.Call
}

// DeleteProfile is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *UserProfileRepository_Expecter) DeleteProfile(ctx interface{}, userID interface{}) *UserProfileRepository_DeleteProfile_Call {
	return &UserProfileRepository_DeleteProfile_Call{Call: _e.mock.On("DeleteProfile", ctx, userID)}
}

func (_c *UserProfileRepository_DeleteProfile_Call) Run(run func(ctx context.Context, userID string)) *UserProfileRepository_DeleteProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserProfileRepository_DeleteProfile_Call) Return(_a0 error) *UserProfileRepository_DeleteProfile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserProfileRepository_DeleteProfile_Call) RunAndReturn(run func(context.Context, string) error) *UserProfileRepository_DeleteProfile_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserProfileByID provides a mock function with given fields: ctx, userID
func (_m *UserProfileRepository) GetUserProfileByID(ctx context.Context, userID string) (*domain.UserProfile, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserProfileByID")
	}

	var r0 *domain.UserProfile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.UserProfile, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.UserProfile); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.UserProfile)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserProfileRepository_GetUserProfileByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserProfileByID'
type UserProfileRepository_GetUserProfileByID_Call struct {
	*mock.Call
}

// GetUserProfileByID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *UserProfileRepository_Expecter) GetUserProfileByID(ctx interface{}, userID interface{}) *UserProfileRepository_GetUserProfileByID_Call {
	return &UserProfileRepository_GetUserProfileByID_Call{Call: _e.mock.On("GetUserProfileByID", ctx, userID)}
}

func (_c *UserProfileRepository_GetUserProfileByID_Call) Run(run func(ctx context.Context, userID string)) *UserProfileRepository_GetUserProfileByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserProfileRepository_GetUserProfileByID_Call) Return(_a0 *domain.UserProfile, _a1 error) *UserProfileRepository_GetUserProfileByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserProfileRepository_GetUserProfileByID_Call) RunAndReturn(run func(context.Context, string) (*domain.UserProfile, error)) *UserProfileRepository_GetUserProfileByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserProfile provides a mock function with given fields: ctx, params
func (_m *UserProfileRepository) UpdateUserProfile(ctx context.Context, params sqlc.UpdateUserProfileParams) (*domain.UserProfile, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserProfile")
	}

	var r0 *domain.UserProfile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.UpdateUserProfileParams) (*domain.UserProfile, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.UpdateUserProfileParams) *domain.UserProfile); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.UserProfile)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sqlc.UpdateUserProfileParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserProfileRepository_UpdateUserProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserProfile'
type UserProfileRepository_UpdateUserProfile_Call struct {
	*mock.Call
}

// UpdateUserProfile is a helper method to define mock.On call
//   - ctx context.Context
//   - params sqlc.UpdateUserProfileParams
func (_e *UserProfileRepository_Expecter) UpdateUserProfile(ctx interface{}, params interface{}) *UserProfileRepository_UpdateUserProfile_Call {
	return &UserProfileRepository_UpdateUserProfile_Call{Call: _e.mock.On("UpdateUserProfile", ctx, params)}
}

func (_c *UserProfileRepository_UpdateUserProfile_Call) Run(run func(ctx context.Context, params sqlc.UpdateUserProfileParams)) *UserProfileRepository_UpdateUserProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sqlc.UpdateUserProfileParams))
	})
	return _c
}

func (_c *UserProfileRepository_UpdateUserProfile_Call) Return(_a0 *domain.UserProfile, _a1 error) *UserProfileRepository_UpdateUserProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserProfileRepository_UpdateUserProfile_Call) RunAndReturn(run func(context.Context, sqlc.UpdateUserProfileParams) (*domain.UserProfile, error)) *UserProfileRepository_UpdateUserProfile_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserProfileRepository creates a new instance of UserProfileRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserProfileRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserProfileRepository {
	mock := &UserProfileRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
