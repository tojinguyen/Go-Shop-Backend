// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "github.com/toji-dev/go-shop/internal/services/user-service/internal/domain"

	sqlc "github.com/toji-dev/go-shop/internal/services/user-service/internal/db/sqlc"
)

// UserAccountRepository is an autogenerated mock type for the UserAccountRepository type
type UserAccountRepository struct {
	mock.Mock
}

type UserAccountRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *UserAccountRepository) EXPECT() *UserAccountRepository_Expecter {
	return &UserAccountRepository_Expecter{mock: &_m.Mock}
}

// CheckUserExistsByEmail provides a mock function with given fields: ctx, email
func (_m *UserAccountRepository) CheckUserExistsByEmail(ctx context.Context, email string) (bool, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for CheckUserExistsByEmail")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserAccountRepository_CheckUserExistsByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckUserExistsByEmail'
type UserAccountRepository_CheckUserExistsByEmail_Call struct {
	*mock.Call
}

// CheckUserExistsByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *UserAccountRepository_Expecter) CheckUserExistsByEmail(ctx interface{}, email interface{}) *UserAccountRepository_CheckUserExistsByEmail_Call {
	return &UserAccountRepository_CheckUserExistsByEmail_Call{Call: _e.mock.On("CheckUserExistsByEmail", ctx, email)}
}

func (_c *UserAccountRepository_CheckUserExistsByEmail_Call) Run(run func(ctx context.Context, email string)) *UserAccountRepository_CheckUserExistsByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserAccountRepository_CheckUserExistsByEmail_Call) Return(_a0 bool, _a1 error) *UserAccountRepository_CheckUserExistsByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserAccountRepository_CheckUserExistsByEmail_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *UserAccountRepository_CheckUserExistsByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUserAccount provides a mock function with given fields: ctx, params
func (_m *UserAccountRepository) CreateUserAccount(ctx context.Context, params sqlc.CreateUserAccountParams) (*domain.UserAccount, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserAccount")
	}

	var r0 *domain.UserAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.CreateUserAccountParams) (*domain.UserAccount, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.CreateUserAccountParams) *domain.UserAccount); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.UserAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sqlc.CreateUserAccountParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserAccountRepository_CreateUserAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUserAccount'
type UserAccountRepository_CreateUserAccount_Call struct {
	*mock.Call
}

// CreateUserAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - params sqlc.CreateUserAccountParams
func (_e *UserAccountRepository_Expecter) CreateUserAccount(ctx interface{}, params interface{}) *UserAccountRepository_CreateUserAccount_Call {
	return &UserAccountRepository_CreateUserAccount_Call{Call: _e.mock.On("CreateUserAccount", ctx, params)}
}

func (_c *UserAccountRepository_CreateUserAccount_Call) Run(run func(ctx context.Context, params sqlc.CreateUserAccountParams)) *UserAccountRepository_CreateUserAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sqlc.CreateUserAccountParams))
	})
	return _c
}

func (_c *UserAccountRepository_CreateUserAccount_Call) Return(_a0 *domain.UserAccount, _a1 error) *UserAccountRepository_CreateUserAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserAccountRepository_CreateUserAccount_Call) RunAndReturn(run func(context.Context, sqlc.CreateUserAccountParams) (*domain.UserAccount, error)) *UserAccountRepository_CreateUserAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserAccountByEmail provides a mock function with given fields: ctx, email
func (_m *UserAccountRepository) GetUserAccountByEmail(ctx context.Context, email string) (*domain.UserAccount, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserAccountByEmail")
	}

	var r0 *domain.UserAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.UserAccount, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.UserAccount); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.UserAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserAccountRepository_GetUserAccountByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserAccountByEmail'
type UserAccountRepository_GetUserAccountByEmail_Call struct {
	*mock.Call
}

// GetUserAccountByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *UserAccountRepository_Expecter) GetUserAccountByEmail(ctx interface{}, email interface{}) *UserAccountRepository_GetUserAccountByEmail_Call {
	return &UserAccountRepository_GetUserAccountByEmail_Call{Call: _e.mock.On("GetUserAccountByEmail", ctx, email)}
}

func (_c *UserAccountRepository_GetUserAccountByEmail_Call) Run(run func(ctx context.Context, email string)) *UserAccountRepository_GetUserAccountByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserAccountRepository_GetUserAccountByEmail_Call) Return(_a0 *domain.UserAccount, _a1 error) *UserAccountRepository_GetUserAccountByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserAccountRepository_GetUserAccountByEmail_Call) RunAndReturn(run func(context.Context, string) (*domain.UserAccount, error)) *UserAccountRepository_GetUserAccountByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserAccountByID provides a mock function with given fields: ctx, id
func (_m *UserAccountRepository) GetUserAccountByID(ctx context.Context, id string) (*domain.UserAccount, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserAccountByID")
	}

	var r0 *domain.UserAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.UserAccount, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.UserAccount); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.UserAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserAccountRepository_GetUserAccountByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserAccountByID'
type UserAccountRepository_GetUserAccountByID_Call struct {
	*mock.Call
}

// GetUserAccountByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *UserAccountRepository_Expecter) GetUserAccountByID(ctx interface{}, id interface{}) *UserAccountRepository_GetUserAccountByID_Call {
	return &UserAccountRepository_GetUserAccountByID_Call{Call: _e.mock.On("GetUserAccountByID", ctx, id)}
}

func (_c *UserAccountRepository_GetUserAccountByID_Call) Run(run func(ctx context.Context, id string)) *UserAccountRepository_GetUserAccountByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserAccountRepository_GetUserAccountByID_Call) Return(_a0 *domain.UserAccount, _a1 error) *UserAccountRepository_GetUserAccountByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserAccountRepository_GetUserAccountByID_Call) RunAndReturn(run func(context.Context, string) (*domain.UserAccount, error)) *UserAccountRepository_GetUserAccountByID_Call {
	_c.Call.Return(run)
	return _c
}

// SoftDeleteUserAccount provides a mock function with given fields: ctx, id
func (_m *UserAccountRepository) SoftDeleteUserAccount(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for SoftDeleteUserAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserAccountRepository_SoftDeleteUserAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SoftDeleteUserAccount'
type UserAccountRepository_SoftDeleteUserAccount_Call struct {
	*mock.Call
}

// SoftDeleteUserAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *UserAccountRepository_Expecter) SoftDeleteUserAccount(ctx interface{}, id interface{}) *UserAccountRepository_SoftDeleteUserAccount_Call {
	return &UserAccountRepository_SoftDeleteUserAccount_Call{Call: _e.mock.On("SoftDeleteUserAccount", ctx, id)}
}

func (_c *UserAccountRepository_SoftDeleteUserAccount_Call) Run(run func(ctx context.Context, id string)) *UserAccountRepository_SoftDeleteUserAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserAccountRepository_SoftDeleteUserAccount_Call) Return(_a0 error) *UserAccountRepository_SoftDeleteUserAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserAccountRepository_SoftDeleteUserAccount_Call) RunAndReturn(run func(context.Context, string) error) *UserAccountRepository_SoftDeleteUserAccount_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLastLoginAt provides a mock function with given fields: ctx, id
func (_m *UserAccountRepository) UpdateLastLoginAt(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLastLoginAt")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserAccountRepository_UpdateLastLoginAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLastLoginAt'
type UserAccountRepository_UpdateLastLoginAt_Call struct {
	*mock.Call
}

// UpdateLastLoginAt is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *UserAccountRepository_Expecter) UpdateLastLoginAt(ctx interface{}, id interface{}) *UserAccountRepository_UpdateLastLoginAt_Call {
	return &UserAccountRepository_UpdateLastLoginAt_Call{Call: _e.mock.On("UpdateLastLoginAt", ctx, id)}
}

func (_c *UserAccountRepository_UpdateLastLoginAt_Call) Run(run func(ctx context.Context, id string)) *UserAccountRepository_UpdateLastLoginAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserAccountRepository_UpdateLastLoginAt_Call) Return(_a0 error) *UserAccountRepository_UpdateLastLoginAt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserAccountRepository_UpdateLastLoginAt_Call) RunAndReturn(run func(context.Context, string) error) *UserAccountRepository_UpdateLastLoginAt_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserPassword provides a mock function with given fields: ctx, id, hashedPassword
func (_m *UserAccountRepository) UpdateUserPassword(ctx context.Context, id string, hashedPassword string) error {
	ret := _m.Called(ctx, id, hashedPassword)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, id, hashedPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserAccountRepository_UpdateUserPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserPassword'
type UserAccountRepository_UpdateUserPassword_Call struct {
	*mock.Call
}

// UpdateUserPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - hashedPassword string
func (_e *UserAccountRepository_Expecter) UpdateUserPassword(ctx interface{}, id interface{}, hashedPassword interface{}) *UserAccountRepository_UpdateUserPassword_Call {
	return &UserAccountRepository_UpdateUserPassword_Call{Call: _e.mock.On("UpdateUserPassword", ctx, id, hashedPassword)}
}

func (_c *UserAccountRepository_UpdateUserPassword_Call) Run(run func(ctx context.Context, id string, hashedPassword string)) *UserAccountRepository_UpdateUserPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UserAccountRepository_UpdateUserPassword_Call) Return(_a0 error) *UserAccountRepository_UpdateUserPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserAccountRepository_UpdateUserPassword_Call) RunAndReturn(run func(context.Context, string, string) error) *UserAccountRepository_UpdateUserPassword_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserAccountRepository creates a new instance of UserAccountRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserAccountRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserAccountRepository {
	mock := &UserAccountRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
