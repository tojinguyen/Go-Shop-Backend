// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "github.com/toji-dev/go-shop/internal/services/user-service/internal/domain"

	sqlc "github.com/toji-dev/go-shop/internal/services/user-service/internal/db/sqlc"
)

// AddressRepository is an autogenerated mock type for the AddressRepository type
type AddressRepository struct {
	mock.Mock
}

type AddressRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *AddressRepository) EXPECT() *AddressRepository_Expecter {
	return &AddressRepository_Expecter{mock: &_m.Mock}
}

// CreateAddress provides a mock function with given fields: ctx, params
func (_m *AddressRepository) CreateAddress(ctx context.Context, params sqlc.CreateAddressParams) (*domain.Address, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for CreateAddress")
	}

	var r0 *domain.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.CreateAddressParams) (*domain.Address, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.CreateAddressParams) *domain.Address); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sqlc.CreateAddressParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddressRepository_CreateAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAddress'
type AddressRepository_CreateAddress_Call struct {
	*mock.Call
}

// CreateAddress is a helper method to define mock.On call
//   - ctx context.Context
//   - params sqlc.CreateAddressParams
func (_e *AddressRepository_Expecter) CreateAddress(ctx interface{}, params interface{}) *AddressRepository_CreateAddress_Call {
	return &AddressRepository_CreateAddress_Call{Call: _e.mock.On("CreateAddress", ctx, params)}
}

func (_c *AddressRepository_CreateAddress_Call) Run(run func(ctx context.Context, params sqlc.CreateAddressParams)) *AddressRepository_CreateAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sqlc.CreateAddressParams))
	})
	return _c
}

func (_c *AddressRepository_CreateAddress_Call) Return(_a0 *domain.Address, _a1 error) *AddressRepository_CreateAddress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AddressRepository_CreateAddress_Call) RunAndReturn(run func(context.Context, sqlc.CreateAddressParams) (*domain.Address, error)) *AddressRepository_CreateAddress_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAddress provides a mock function with given fields: ctx, addressID
func (_m *AddressRepository) DeleteAddress(ctx context.Context, addressID string) error {
	ret := _m.Called(ctx, addressID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAddress")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, addressID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddressRepository_DeleteAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAddress'
type AddressRepository_DeleteAddress_Call struct {
	*mock.Call
}

// DeleteAddress is a helper method to define mock.On call
//   - ctx context.Context
//   - addressID string
func (_e *AddressRepository_Expecter) DeleteAddress(ctx interface{}, addressID interface{}) *AddressRepository_DeleteAddress_Call {
	return &AddressRepository_DeleteAddress_Call{Call: _e.mock.On("DeleteAddress", ctx, addressID)}
}

func (_c *AddressRepository_DeleteAddress_Call) Run(run func(ctx context.Context, addressID string)) *AddressRepository_DeleteAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AddressRepository_DeleteAddress_Call) Return(_a0 error) *AddressRepository_DeleteAddress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AddressRepository_DeleteAddress_Call) RunAndReturn(run func(context.Context, string) error) *AddressRepository_DeleteAddress_Call {
	_c.Call.Return(run)
	return _c
}

// GetAddressByID provides a mock function with given fields: ctx, addressID
func (_m *AddressRepository) GetAddressByID(ctx context.Context, addressID string) (*domain.Address, error) {
	ret := _m.Called(ctx, addressID)

	if len(ret) == 0 {
		panic("no return value specified for GetAddressByID")
	}

	var r0 *domain.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Address, error)); ok {
		return rf(ctx, addressID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Address); ok {
		r0 = rf(ctx, addressID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, addressID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddressRepository_GetAddressByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAddressByID'
type AddressRepository_GetAddressByID_Call struct {
	*mock.Call
}

// GetAddressByID is a helper method to define mock.On call
//   - ctx context.Context
//   - addressID string
func (_e *AddressRepository_Expecter) GetAddressByID(ctx interface{}, addressID interface{}) *AddressRepository_GetAddressByID_Call {
	return &AddressRepository_GetAddressByID_Call{Call: _e.mock.On("GetAddressByID", ctx, addressID)}
}

func (_c *AddressRepository_GetAddressByID_Call) Run(run func(ctx context.Context, addressID string)) *AddressRepository_GetAddressByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AddressRepository_GetAddressByID_Call) Return(_a0 *domain.Address, _a1 error) *AddressRepository_GetAddressByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AddressRepository_GetAddressByID_Call) RunAndReturn(run func(context.Context, string) (*domain.Address, error)) *AddressRepository_GetAddressByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAddressesByUserID provides a mock function with given fields: ctx, userID
func (_m *AddressRepository) GetAddressesByUserID(ctx context.Context, userID string) ([]domain.Address, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAddressesByUserID")
	}

	var r0 []domain.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]domain.Address, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []domain.Address); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddressRepository_GetAddressesByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAddressesByUserID'
type AddressRepository_GetAddressesByUserID_Call struct {
	*mock.Call
}

// GetAddressesByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *AddressRepository_Expecter) GetAddressesByUserID(ctx interface{}, userID interface{}) *AddressRepository_GetAddressesByUserID_Call {
	return &AddressRepository_GetAddressesByUserID_Call{Call: _e.mock.On("GetAddressesByUserID", ctx, userID)}
}

func (_c *AddressRepository_GetAddressesByUserID_Call) Run(run func(ctx context.Context, userID string)) *AddressRepository_GetAddressesByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AddressRepository_GetAddressesByUserID_Call) Return(_a0 []domain.Address, _a1 error) *AddressRepository_GetAddressesByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AddressRepository_GetAddressesByUserID_Call) RunAndReturn(run func(context.Context, string) ([]domain.Address, error)) *AddressRepository_GetAddressesByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// GetDefaultAddressByUserID provides a mock function with given fields: ctx, userID
func (_m *AddressRepository) GetDefaultAddressByUserID(ctx context.Context, userID string) (*domain.Address, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetDefaultAddressByUserID")
	}

	var r0 *domain.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Address, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Address); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddressRepository_GetDefaultAddressByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDefaultAddressByUserID'
type AddressRepository_GetDefaultAddressByUserID_Call struct {
	*mock.Call
}

// GetDefaultAddressByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *AddressRepository_Expecter) GetDefaultAddressByUserID(ctx interface{}, userID interface{}) *AddressRepository_GetDefaultAddressByUserID_Call {
	return &AddressRepository_GetDefaultAddressByUserID_Call{Call: _e.mock.On("GetDefaultAddressByUserID", ctx, userID)}
}

func (_c *AddressRepository_GetDefaultAddressByUserID_Call) Run(run func(ctx context.Context, userID string)) *AddressRepository_GetDefaultAddressByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AddressRepository_GetDefaultAddressByUserID_Call) Return(_a0 *domain.Address, _a1 error) *AddressRepository_GetDefaultAddressByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AddressRepository_GetDefaultAddressByUserID_Call) RunAndReturn(run func(context.Context, string) (*domain.Address, error)) *AddressRepository_GetDefaultAddressByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// SetDefaultAddress provides a mock function with given fields: ctx, params
func (_m *AddressRepository) SetDefaultAddress(ctx context.Context, params sqlc.SetDefaultAddressParams) (*domain.Address, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for SetDefaultAddress")
	}

	var r0 *domain.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.SetDefaultAddressParams) (*domain.Address, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.SetDefaultAddressParams) *domain.Address); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sqlc.SetDefaultAddressParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddressRepository_SetDefaultAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDefaultAddress'
type AddressRepository_SetDefaultAddress_Call struct {
	*mock.Call
}

// SetDefaultAddress is a helper method to define mock.On call
//   - ctx context.Context
//   - params sqlc.SetDefaultAddressParams
func (_e *AddressRepository_Expecter) SetDefaultAddress(ctx interface{}, params interface{}) *AddressRepository_SetDefaultAddress_Call {
	return &AddressRepository_SetDefaultAddress_Call{Call: _e.mock.On("SetDefaultAddress", ctx, params)}
}

func (_c *AddressRepository_SetDefaultAddress_Call) Run(run func(ctx context.Context, params sqlc.SetDefaultAddressParams)) *AddressRepository_SetDefaultAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sqlc.SetDefaultAddressParams))
	})
	return _c
}

func (_c *AddressRepository_SetDefaultAddress_Call) Return(_a0 *domain.Address, _a1 error) *AddressRepository_SetDefaultAddress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AddressRepository_SetDefaultAddress_Call) RunAndReturn(run func(context.Context, sqlc.SetDefaultAddressParams) (*domain.Address, error)) *AddressRepository_SetDefaultAddress_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAddress provides a mock function with given fields: ctx, params
func (_m *AddressRepository) UpdateAddress(ctx context.Context, params sqlc.UpdateAddressParams) (*domain.Address, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAddress")
	}

	var r0 *domain.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.UpdateAddressParams) (*domain.Address, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.UpdateAddressParams) *domain.Address); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sqlc.UpdateAddressParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddressRepository_UpdateAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAddress'
type AddressRepository_UpdateAddress_Call struct {
	*mock.Call
}

// UpdateAddress is a helper method to define mock.On call
//   - ctx context.Context
//   - params sqlc.UpdateAddressParams
func (_e *AddressRepository_Expecter) UpdateAddress(ctx interface{}, params interface{}) *AddressRepository_UpdateAddress_Call {
	return &AddressRepository_UpdateAddress_Call{Call: _e.mock.On("UpdateAddress", ctx, params)}
}

func (_c *AddressRepository_UpdateAddress_Call) Run(run func(ctx context.Context, params sqlc.UpdateAddressParams)) *AddressRepository_UpdateAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sqlc.UpdateAddressParams))
	})
	return _c
}

func (_c *AddressRepository_UpdateAddress_Call) Return(_a0 *domain.Address, _a1 error) *AddressRepository_UpdateAddress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AddressRepository_UpdateAddress_Call) RunAndReturn(run func(context.Context, sqlc.UpdateAddressParams) (*domain.Address, error)) *AddressRepository_UpdateAddress_Call {
	_c.Call.Return(run)
	return _c
}

// NewAddressRepository creates a new instance of AddressRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAddressRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AddressRepository {
	mock := &AddressRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
