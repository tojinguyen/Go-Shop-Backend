// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_account.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkUserExistsByEmail = `-- name: CheckUserExistsByEmail :one
SELECT id 
FROM user_accounts 
WHERE email = $1 AND deleted_at IS NULL
`

func (q *Queries) CheckUserExistsByEmail(ctx context.Context, email string) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, checkUserExistsByEmail, email)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const createUserAccount = `-- name: CreateUserAccount :one
INSERT INTO user_accounts (
  email, hashed_password, user_role
) VALUES (
  $1, $2, $3
) RETURNING id, email, user_role, created_at, updated_at
`

type CreateUserAccountParams struct {
	Email          string `json:"email"`
	HashedPassword string `json:"hashed_password"`
	UserRole       string `json:"user_role"`
}

type CreateUserAccountRow struct {
	ID        pgtype.UUID        `json:"id"`
	Email     string             `json:"email"`
	UserRole  string             `json:"user_role"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateUserAccount(ctx context.Context, arg CreateUserAccountParams) (CreateUserAccountRow, error) {
	row := q.db.QueryRow(ctx, createUserAccount, arg.Email, arg.HashedPassword, arg.UserRole)
	var i CreateUserAccountRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.UserRole,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserAccountByEmail = `-- name: GetUserAccountByEmail :one
SELECT id, email, hashed_password, user_role, last_login_at, created_at, updated_at 
FROM user_accounts 
WHERE email = $1 AND deleted_at IS NULL
`

type GetUserAccountByEmailRow struct {
	ID             pgtype.UUID        `json:"id"`
	Email          string             `json:"email"`
	HashedPassword string             `json:"hashed_password"`
	UserRole       string             `json:"user_role"`
	LastLoginAt    pgtype.Timestamptz `json:"last_login_at"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) GetUserAccountByEmail(ctx context.Context, email string) (GetUserAccountByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserAccountByEmail, email)
	var i GetUserAccountByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.UserRole,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserAccountByID = `-- name: GetUserAccountByID :one
SELECT id, email, hashed_password, user_role, last_login_at, created_at, updated_at 
FROM user_accounts 
WHERE id = $1 AND deleted_at IS NULL
`

type GetUserAccountByIDRow struct {
	ID             pgtype.UUID        `json:"id"`
	Email          string             `json:"email"`
	HashedPassword string             `json:"hashed_password"`
	UserRole       string             `json:"user_role"`
	LastLoginAt    pgtype.Timestamptz `json:"last_login_at"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) GetUserAccountByID(ctx context.Context, id pgtype.UUID) (GetUserAccountByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserAccountByID, id)
	var i GetUserAccountByIDRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.UserRole,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const softDeleteUserAccount = `-- name: SoftDeleteUserAccount :exec
UPDATE user_accounts 
SET deleted_at = CURRENT_TIMESTAMP, updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) SoftDeleteUserAccount(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, softDeleteUserAccount, id)
	return err
}

const updateLastLoginAt = `-- name: UpdateLastLoginAt :exec
UPDATE user_accounts 
SET last_login_at = CURRENT_TIMESTAMP, updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) UpdateLastLoginAt(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, updateLastLoginAt, id)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE user_accounts 
SET hashed_password = $2, updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
`

type UpdateUserPasswordParams struct {
	ID             pgtype.UUID `json:"id"`
	HashedPassword string      `json:"hashed_password"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword, arg.ID, arg.HashedPassword)
	return err
}
