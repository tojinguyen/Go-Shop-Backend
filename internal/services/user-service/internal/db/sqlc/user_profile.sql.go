// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_profile.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUserProfile = `-- name: CreateUserProfile :one
INSERT INTO user_profiles (
  user_id,
  email,
  full_name,
  birthday,
  phone,
  banned_at,
  avatar_url,
  gender,
  default_address_id,
  created_at,
  updated_at
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, now(), now()
)
RETURNING
  user_id,
  email,
  full_name,
  birthday,
  phone,
  banned_at,
  avatar_url,
  gender,
  default_address_id,
  created_at,
  updated_at
`

type CreateUserProfileParams struct {
	UserID           pgtype.UUID        `json:"user_id"`
	Email            string             `json:"email"`
	FullName         pgtype.Text        `json:"full_name"`
	Birthday         pgtype.Date        `json:"birthday"`
	Phone            pgtype.Text        `json:"phone"`
	BannedAt         pgtype.Timestamptz `json:"banned_at"`
	AvatarUrl        pgtype.Text        `json:"avatar_url"`
	Gender           pgtype.Text        `json:"gender"`
	DefaultAddressID pgtype.UUID        `json:"default_address_id"`
}

func (q *Queries) CreateUserProfile(ctx context.Context, arg CreateUserProfileParams) (UserProfile, error) {
	row := q.db.QueryRow(ctx, createUserProfile,
		arg.UserID,
		arg.Email,
		arg.FullName,
		arg.Birthday,
		arg.Phone,
		arg.BannedAt,
		arg.AvatarUrl,
		arg.Gender,
		arg.DefaultAddressID,
	)
	var i UserProfile
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.FullName,
		&i.Birthday,
		&i.Phone,
		&i.BannedAt,
		&i.AvatarUrl,
		&i.Gender,
		&i.DefaultAddressID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
