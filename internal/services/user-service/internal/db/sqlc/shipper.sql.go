// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: shipper.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createShipper = `-- name: CreateShipper :one
INSERT INTO shipper_profiles (
    user_id,
    vehicle_type,
    vehicle_image_url,
    identify_card_url,
    license_plate
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING user_id, vehicle_type, vehicle_image_url, identify_card_url, license_plate
`

type CreateShipperParams struct {
	UserID          pgtype.UUID `json:"user_id"`
	VehicleType     pgtype.Text `json:"vehicle_type"`
	VehicleImageUrl pgtype.Text `json:"vehicle_image_url"`
	IdentifyCardUrl pgtype.Text `json:"identify_card_url"`
	LicensePlate    pgtype.Text `json:"license_plate"`
}

func (q *Queries) CreateShipper(ctx context.Context, arg CreateShipperParams) (ShipperProfile, error) {
	row := q.db.QueryRow(ctx, createShipper,
		arg.UserID,
		arg.VehicleType,
		arg.VehicleImageUrl,
		arg.IdentifyCardUrl,
		arg.LicensePlate,
	)
	var i ShipperProfile
	err := row.Scan(
		&i.UserID,
		&i.VehicleType,
		&i.VehicleImageUrl,
		&i.IdentifyCardUrl,
		&i.LicensePlate,
	)
	return i, err
}

const deleteShipperByUserID = `-- name: DeleteShipperByUserID :exec
DELETE FROM shipper_profiles
WHERE user_id = $1
`

func (q *Queries) DeleteShipperByUserID(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteShipperByUserID, userID)
	return err
}

const getShipperByUserID = `-- name: GetShipperByUserID :one
SELECT user_id, vehicle_type, vehicle_image_url, identify_card_url, license_plate FROM shipper_profiles
WHERE user_id = $1
`

func (q *Queries) GetShipperByUserID(ctx context.Context, userID pgtype.UUID) (ShipperProfile, error) {
	row := q.db.QueryRow(ctx, getShipperByUserID, userID)
	var i ShipperProfile
	err := row.Scan(
		&i.UserID,
		&i.VehicleType,
		&i.VehicleImageUrl,
		&i.IdentifyCardUrl,
		&i.LicensePlate,
	)
	return i, err
}

const updateShipperByUserID = `-- name: UpdateShipperByUserID :one
UPDATE shipper_profiles 
SET 
    vehicle_type = $2,
    vehicle_image_url = $3,
    identify_card_url = $4,
    license_plate = $5
WHERE user_id = $1
RETURNING user_id, vehicle_type, vehicle_image_url, identify_card_url, license_plate
`

type UpdateShipperByUserIDParams struct {
	UserID          pgtype.UUID `json:"user_id"`
	VehicleType     pgtype.Text `json:"vehicle_type"`
	VehicleImageUrl pgtype.Text `json:"vehicle_image_url"`
	IdentifyCardUrl pgtype.Text `json:"identify_card_url"`
	LicensePlate    pgtype.Text `json:"license_plate"`
}

func (q *Queries) UpdateShipperByUserID(ctx context.Context, arg UpdateShipperByUserIDParams) (ShipperProfile, error) {
	row := q.db.QueryRow(ctx, updateShipperByUserID,
		arg.UserID,
		arg.VehicleType,
		arg.VehicleImageUrl,
		arg.IdentifyCardUrl,
		arg.LicensePlate,
	)
	var i ShipperProfile
	err := row.Scan(
		&i.UserID,
		&i.VehicleType,
		&i.VehicleImageUrl,
		&i.IdentifyCardUrl,
		&i.LicensePlate,
	)
	return i, err
}
