// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: address.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAddress = `-- name: CreateAddress :one
INSERT INTO addresses (
  user_id,
  is_default,
  street,
  ward,
  district,
  city,
  country,
  lat,
  long,
  created_at,
  updated_at
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, now(), now()
)
RETURNING
  id,
  user_id,
  is_default,
  street,
  ward,
  district,
  city,
  country,
  lat,
  long,
  deleted_at,
  created_at,
  updated_at
`

type CreateAddressParams struct {
	UserID    pgtype.UUID   `json:"user_id"`
	IsDefault pgtype.Bool   `json:"is_default"`
	Street    string        `json:"street"`
	Ward      pgtype.Text   `json:"ward"`
	District  pgtype.Text   `json:"district"`
	City      pgtype.Text   `json:"city"`
	Country   pgtype.Text   `json:"country"`
	Lat       pgtype.Float8 `json:"lat"`
	Long      pgtype.Float8 `json:"long"`
}

func (q *Queries) CreateAddress(ctx context.Context, arg CreateAddressParams) (Address, error) {
	row := q.db.QueryRow(ctx, createAddress,
		arg.UserID,
		arg.IsDefault,
		arg.Street,
		arg.Ward,
		arg.District,
		arg.City,
		arg.Country,
		arg.Lat,
		arg.Long,
	)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.IsDefault,
		&i.Street,
		&i.Ward,
		&i.District,
		&i.City,
		&i.Country,
		&i.Lat,
		&i.Long,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAddress = `-- name: DeleteAddress :exec
UPDATE addresses
SET
  deleted_at = now(),
  updated_at = now()
WHERE id = $1
`

func (q *Queries) DeleteAddress(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteAddress, id)
	return err
}

const getAddressById = `-- name: GetAddressById :one
SELECT
  id,
  user_id,
  is_default,
  street,
  ward,
  district,
  city,
  country,
  lat,
  long,
  deleted_at,
  created_at,
  updated_at
FROM addresses
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetAddressById(ctx context.Context, id pgtype.UUID) (Address, error) {
	row := q.db.QueryRow(ctx, getAddressById, id)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.IsDefault,
		&i.Street,
		&i.Ward,
		&i.District,
		&i.City,
		&i.Country,
		&i.Lat,
		&i.Long,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAddressesByUserId = `-- name: GetAddressesByUserId :many
SELECT
  id,
  user_id,
  is_default,
  street,
  ward,
  district,
  city,
  country,
  lat,
  long,
  deleted_at,
  created_at,
  updated_at
FROM addresses
WHERE user_id = $1 AND deleted_at IS NULL
ORDER BY is_default DESC, created_at DESC
`

func (q *Queries) GetAddressesByUserId(ctx context.Context, userID pgtype.UUID) ([]Address, error) {
	rows, err := q.db.Query(ctx, getAddressesByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Address{}
	for rows.Next() {
		var i Address
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.IsDefault,
			&i.Street,
			&i.Ward,
			&i.District,
			&i.City,
			&i.Country,
			&i.Lat,
			&i.Long,
			&i.DeletedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDefaultAddressByUserId = `-- name: GetDefaultAddressByUserId :one
SELECT
  id,
  user_id,
  is_default,
  street,
  ward,
  district,
  city,
  country,
  lat,
  long,
  deleted_at,
  created_at,
  updated_at
FROM addresses
WHERE user_id = $1 AND is_default = true AND deleted_at IS NULL
`

func (q *Queries) GetDefaultAddressByUserId(ctx context.Context, userID pgtype.UUID) (Address, error) {
	row := q.db.QueryRow(ctx, getDefaultAddressByUserId, userID)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.IsDefault,
		&i.Street,
		&i.Ward,
		&i.District,
		&i.City,
		&i.Country,
		&i.Lat,
		&i.Long,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const setDefaultAddress = `-- name: SetDefaultAddress :exec
UPDATE addresses
SET
  is_default = CASE WHEN id = $2 THEN true ELSE false END,
  updated_at = now()
WHERE user_id = $1 AND deleted_at IS NULL
`

type SetDefaultAddressParams struct {
	UserID pgtype.UUID `json:"user_id"`
	ID     pgtype.UUID `json:"id"`
}

func (q *Queries) SetDefaultAddress(ctx context.Context, arg SetDefaultAddressParams) error {
	_, err := q.db.Exec(ctx, setDefaultAddress, arg.UserID, arg.ID)
	return err
}

const updateAddress = `-- name: UpdateAddress :one
UPDATE addresses
SET
  is_default = $2,
  street = $3,
  ward = $4,
  district = $5,
  city = $6,
  country = $7,
  lat = $8,
  long = $9,
  updated_at = now()
WHERE id = $1 AND deleted_at IS NULL
RETURNING
  id,
  user_id,
  is_default,
  street,
  ward,
  district,
  city,
  country,
  lat,
  long,
  deleted_at,
  created_at,
  updated_at
`

type UpdateAddressParams struct {
	ID        pgtype.UUID   `json:"id"`
	IsDefault pgtype.Bool   `json:"is_default"`
	Street    string        `json:"street"`
	Ward      pgtype.Text   `json:"ward"`
	District  pgtype.Text   `json:"district"`
	City      pgtype.Text   `json:"city"`
	Country   pgtype.Text   `json:"country"`
	Lat       pgtype.Float8 `json:"lat"`
	Long      pgtype.Float8 `json:"long"`
}

func (q *Queries) UpdateAddress(ctx context.Context, arg UpdateAddressParams) (Address, error) {
	row := q.db.QueryRow(ctx, updateAddress,
		arg.ID,
		arg.IsDefault,
		arg.Street,
		arg.Ward,
		arg.District,
		arg.City,
		arg.Country,
		arg.Lat,
		arg.Long,
	)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.IsDefault,
		&i.Street,
		&i.Ward,
		&i.District,
		&i.City,
		&i.Country,
		&i.Lat,
		&i.Long,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
