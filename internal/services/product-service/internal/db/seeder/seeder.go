package seeder

import (
	"context"
	"fmt"
	"log"
	"math/rand"

	"github.com/go-faker/faker/v4"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgxpool"
	"github.com/toji-dev/go-shop/internal/pkg/converter"
	"github.com/toji-dev/go-shop/internal/services/product-service/internal/db/sqlc"
)

type Seeder struct {
	productDB *pgxpool.Pool
	shopDB    *pgxpool.Pool
	queries   *sqlc.Queries
	ctx       context.Context
}

func NewSeeder(productDB, shopDB *pgxpool.Pool) *Seeder {
	return &Seeder{
		productDB: productDB,
		shopDB:    shopDB,
		queries:   sqlc.New(productDB),
		ctx:       context.Background(),
	}
}

// fetchShopIDs l·∫•y danh s√°ch ID c·ªßa c√°c shop t·ª´ DB c·ªßa shop-service
func (s *Seeder) fetchShopIDs() ([]uuid.UUID, error) {
	log.Println("Fetching shop IDs from shop-service database...")
	rows, err := s.shopDB.Query(s.ctx, "SELECT id FROM shops")
	if err != nil {
		return nil, fmt.Errorf("failed to query shop IDs: %w", err)
	}
	defer rows.Close()

	var shopIDs []uuid.UUID
	for rows.Next() {
		var id uuid.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, fmt.Errorf("failed to scan shop ID: %w", err)
		}
		shopIDs = append(shopIDs, id)
	}

	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("error iterating over shop IDs: %w", err)
	}

	log.Printf("Found %d shops.", len(shopIDs))
	return shopIDs, nil
}

// SeedProducts t·∫°o d·ªØ li·ªáu gi·∫£ cho s·∫£n ph·∫©m v·ªõi logic ƒë√£ ƒë∆∞·ª£c c·∫£i ti·∫øn
func (s *Seeder) SeedProducts(count int) {
	shopIDs, err := s.fetchShopIDs()
	if err != nil {
		log.Fatalf("‚ùå Could not fetch shops: %v", err)
	}
	if len(shopIDs) == 0 {
		log.Println("‚ö†Ô∏è No shops found in shop-service DB. Please seed shops first.")
		log.Println("Run: make seed-shops")
		return
	}

	log.Printf("üå± Seeding %d products with improved logic...", count)

	// [X√ìA B·ªé] M·∫£ng tr·∫°ng th√°i ng·∫´u nhi√™n ƒë√£ ƒë∆∞·ª£c lo·∫°i b·ªè.
	// productStatuses := []sqlc.ProductStatus{ ... }

	for i := 0; i < count; i++ {
		// Ch·ªçn ng·∫´u nhi√™n m·ªôt shop
		shopID := shopIDs[rand.Intn(len(shopIDs))]

		// =======================================================
		// [LOGIC M·ªöI] X√°c ƒë·ªãnh tr·∫°ng th√°i v√† s·ªë l∆∞·ª£ng s·∫£n ph·∫©m m·ªôt c√°ch logic
		// =======================================================
		var quantity int32
		var status sqlc.ProductStatus

		// Ph√¢n ph·ªëi tr·∫°ng th√°i s·∫£n ph·∫©m ƒë·ªÉ d·ªØ li·ªáu th·ª±c t·∫ø h∆°n
		stateChance := rand.Intn(100) // T·∫°o s·ªë ng·∫´u nhi√™n t·ª´ 0-99

		switch {
		case stateChance < 80: // 80% tr∆∞·ªùng h·ª£p: S·∫£n ph·∫©m ƒëang ho·∫°t ƒë·ªông v√† c√≥ h√†ng
			quantity = int32(rand.Intn(1000) + 10) // S·ªë l∆∞·ª£ng t·ªìn kho t·ª´ 10 ƒë·∫øn 1009
			status = sqlc.ProductStatusACTIVE
		case stateChance < 95: // 15% tr∆∞·ªùng h·ª£p: S·∫£n ph·∫©m kh√¥ng ho·∫°t ƒë·ªông (ng∆∞·ªùi b√°n t·∫°m ·∫©n)
			quantity = int32(rand.Intn(500)) // C√≥ th·ªÉ c√≥ ho·∫∑c kh√¥ng c√≥ h√†ng
			status = sqlc.ProductStatusINACTIVE
		default: // 5% tr∆∞·ªùng h·ª£p c√≤n l·∫°i: H·∫øt h√†ng
			quantity = 0
			status = sqlc.ProductStatusOUTOFSTOCK
		}
		// =======================================================

		// T·∫°o d·ªØ li·ªáu s·∫£n ph·∫©m gi·∫£
		productDesc := faker.Paragraph()
		price, _ := faker.RandomInt(10000, 5000000, 1) // Gi√° t·ª´ 10k ƒë·∫øn 5tr

		params := sqlc.CreateProductParams{
			ShopID:             converter.UUIDToPgUUID(shopID),
			ProductName:        faker.Sentence(),
			ThumbnailUrl:       converter.StringToPgText(nil), // C√≥ th·ªÉ th√™m URL ·∫£nh gi·∫£ ·ªü ƒë√¢y
			ProductDescription: converter.StringToPgText(&productDesc),
			Price:              converter.Float64ToPgNumeric(float64(price[0])),
			Currency:           "VND",
			Quantity:           quantity, // [THAY ƒê·ªîI] S·ª≠ d·ª•ng s·ªë l∆∞·ª£ng ƒë√£ ƒë∆∞·ª£c quy·∫øt ƒë·ªãnh ·ªü tr√™n
			ReserveQuantity:    0,        // S·∫£n ph·∫©m m·ªõi t·∫°o ch∆∞a c√≥ ai ƒë·∫∑t tr∆∞·ªõc
			ProductStatus:      status,   // [THAY ƒê·ªîI] S·ª≠ d·ª•ng tr·∫°ng th√°i logic
		}

		_, err := s.queries.CreateProduct(s.ctx, params)
		if err != nil {
			log.Printf("Failed to create product for shop %s: %v", shopID, err)
			continue // B·ªè qua s·∫£n ph·∫©m n√†y v√† ti·∫øp t·ª•c
		}

		if (i+1)%100 == 0 {
			log.Printf("... seeded %d/%d products", i+1, count)
		}
	}

	log.Println("üéâ Product seeding complete.")
}
