// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package sqlc

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type ProductStatus string

const (
	ProductStatusACTIVE       ProductStatus = "ACTIVE"
	ProductStatusINACTIVE     ProductStatus = "INACTIVE"
	ProductStatusOUTOFSTOCK   ProductStatus = "OUT_OF_STOCK"
	ProductStatusDISCONTINUED ProductStatus = "DISCONTINUED"
	ProductStatusBANNED       ProductStatus = "BANNED"
)

func (e *ProductStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProductStatus(s)
	case string:
		*e = ProductStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ProductStatus: %T", src)
	}
	return nil
}

type NullProductStatus struct {
	ProductStatus ProductStatus `json:"product_status"`
	Valid         bool          `json:"valid"` // Valid is true if ProductStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProductStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ProductStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProductStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProductStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ProductStatus), nil
}

type ReservationStatus string

const (
	ReservationStatusRESERVED  ReservationStatus = "RESERVED"
	ReservationStatusCOMMITTED ReservationStatus = "COMMITTED"
	ReservationStatusCANCELLED ReservationStatus = "CANCELLED"
)

func (e *ReservationStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ReservationStatus(s)
	case string:
		*e = ReservationStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ReservationStatus: %T", src)
	}
	return nil
}

type NullReservationStatus struct {
	ReservationStatus ReservationStatus `json:"reservation_status"`
	Valid             bool              `json:"valid"` // Valid is true if ReservationStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullReservationStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ReservationStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ReservationStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullReservationStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ReservationStatus), nil
}

type Category struct {
	ID                  pgtype.UUID        `json:"id"`
	ParentID            pgtype.UUID        `json:"parent_id"`
	CategoryName        string             `json:"category_name"`
	CategoryDescription pgtype.Text        `json:"category_description"`
	CreatedAt           pgtype.Timestamptz `json:"created_at"`
	UpdatedAt           pgtype.Timestamptz `json:"updated_at"`
}

type OrderReservation struct {
	ID                pgtype.UUID        `json:"id"`
	OrderID           pgtype.UUID        `json:"order_id"`
	ShopID            pgtype.UUID        `json:"shop_id"`
	ReservationStatus ReservationStatus  `json:"reservation_status"`
	CreatedAt         pgtype.Timestamptz `json:"created_at"`
	UpdatedAt         pgtype.Timestamptz `json:"updated_at"`
}

type Product struct {
	ID                 pgtype.UUID        `json:"id"`
	ShopID             pgtype.UUID        `json:"shop_id"`
	ProductName        string             `json:"product_name"`
	ThumbnailUrl       pgtype.Text        `json:"thumbnail_url"`
	ProductDescription pgtype.Text        `json:"product_description"`
	CategoryID         pgtype.UUID        `json:"category_id"`
	Price              pgtype.Numeric     `json:"price"`
	Currency           string             `json:"currency"`
	Quantity           int32              `json:"quantity"`
	ReserveQuantity    int32              `json:"reserve_quantity"`
	ProductStatus      ProductStatus      `json:"product_status"`
	SoldCount          int32              `json:"sold_count"`
	RatingAvg          pgtype.Numeric     `json:"rating_avg"`
	TotalReviews       int32              `json:"total_reviews"`
	CreatedAt          pgtype.Timestamptz `json:"created_at"`
	DeleteAt           pgtype.Timestamptz `json:"delete_at"`
	UpdatedAt          pgtype.Timestamptz `json:"updated_at"`
}
