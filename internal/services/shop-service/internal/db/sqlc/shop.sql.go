// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: shop.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createShop = `-- name: CreateShop :one
INSERT INTO shops (
  id,
  owner_id,
  shop_name,
  avatar_url,
  banner_url,
  shop_description,
  address_id,
  phone,
  email,
  rating,
  active_at,
  created_at,
  updated_at
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
) RETURNING id, owner_id, shop_name, avatar_url, banner_url, shop_description, address_id, phone, email, rating, active_at, banned_at, created_at, updated_at
`

type CreateShopParams struct {
	ID              pgtype.UUID        `json:"id"`
	OwnerID         pgtype.UUID        `json:"owner_id"`
	ShopName        string             `json:"shop_name"`
	AvatarUrl       string             `json:"avatar_url"`
	BannerUrl       string             `json:"banner_url"`
	ShopDescription pgtype.Text        `json:"shop_description"`
	AddressID       pgtype.UUID        `json:"address_id"`
	Phone           string             `json:"phone"`
	Email           string             `json:"email"`
	Rating          pgtype.Numeric     `json:"rating"`
	ActiveAt        pgtype.Timestamptz `json:"active_at"`
}

func (q *Queries) CreateShop(ctx context.Context, arg CreateShopParams) (Shop, error) {
	row := q.db.QueryRow(ctx, createShop,
		arg.ID,
		arg.OwnerID,
		arg.ShopName,
		arg.AvatarUrl,
		arg.BannerUrl,
		arg.ShopDescription,
		arg.AddressID,
		arg.Phone,
		arg.Email,
		arg.Rating,
		arg.ActiveAt,
	)
	var i Shop
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.ShopName,
		&i.AvatarUrl,
		&i.BannerUrl,
		&i.ShopDescription,
		&i.AddressID,
		&i.Phone,
		&i.Email,
		&i.Rating,
		&i.ActiveAt,
		&i.BannedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getShopByID = `-- name: GetShopByID :one
SELECT 
  id,
  owner_id,
  shop_name,
  avatar_url,
  banner_url,
  shop_description,
  address_id,
  phone,
  email,
  rating,
  active_at,
  created_at,
  updated_at
FROM shops
WHERE id = $1
`

type GetShopByIDRow struct {
	ID              pgtype.UUID        `json:"id"`
	OwnerID         pgtype.UUID        `json:"owner_id"`
	ShopName        string             `json:"shop_name"`
	AvatarUrl       string             `json:"avatar_url"`
	BannerUrl       string             `json:"banner_url"`
	ShopDescription pgtype.Text        `json:"shop_description"`
	AddressID       pgtype.UUID        `json:"address_id"`
	Phone           string             `json:"phone"`
	Email           string             `json:"email"`
	Rating          pgtype.Numeric     `json:"rating"`
	ActiveAt        pgtype.Timestamptz `json:"active_at"`
	CreatedAt       pgtype.Timestamptz `json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) GetShopByID(ctx context.Context, id pgtype.UUID) (GetShopByIDRow, error) {
	row := q.db.QueryRow(ctx, getShopByID, id)
	var i GetShopByIDRow
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.ShopName,
		&i.AvatarUrl,
		&i.BannerUrl,
		&i.ShopDescription,
		&i.AddressID,
		&i.Phone,
		&i.Email,
		&i.Rating,
		&i.ActiveAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
