// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: promotion.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPromotion = `-- name: CreatePromotion :one
INSERT INTO shop_promotions (
    id,
    shop_id,
    promotion_name,
    promotion_type,
    discount_value,
    max_discount_amount,
    min_purchase_amount,
    usage_limit_per_user,
    start_time,
    end_time,
    promotion_status
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
) RETURNING id, shop_id, promotion_name, promotion_type, discount_value, max_discount_amount, min_purchase_amount, usage_limit_per_user, start_time, end_time, promotion_status, created_at, updated_at
`

type CreatePromotionParams struct {
	ID                pgtype.UUID         `json:"id"`
	ShopID            pgtype.UUID         `json:"shop_id"`
	PromotionName     string              `json:"promotion_name"`
	PromotionType     PromotionType       `json:"promotion_type"`
	DiscountValue     pgtype.Numeric      `json:"discount_value"`
	MaxDiscountAmount pgtype.Numeric      `json:"max_discount_amount"`
	MinPurchaseAmount pgtype.Numeric      `json:"min_purchase_amount"`
	UsageLimitPerUser pgtype.Int4         `json:"usage_limit_per_user"`
	StartTime         pgtype.Timestamptz  `json:"start_time"`
	EndTime           pgtype.Timestamptz  `json:"end_time"`
	PromotionStatus   NullPromotionStatus `json:"promotion_status"`
}

func (q *Queries) CreatePromotion(ctx context.Context, arg CreatePromotionParams) (ShopPromotion, error) {
	row := q.db.QueryRow(ctx, createPromotion,
		arg.ID,
		arg.ShopID,
		arg.PromotionName,
		arg.PromotionType,
		arg.DiscountValue,
		arg.MaxDiscountAmount,
		arg.MinPurchaseAmount,
		arg.UsageLimitPerUser,
		arg.StartTime,
		arg.EndTime,
		arg.PromotionStatus,
	)
	var i ShopPromotion
	err := row.Scan(
		&i.ID,
		&i.ShopID,
		&i.PromotionName,
		&i.PromotionType,
		&i.DiscountValue,
		&i.MaxDiscountAmount,
		&i.MinPurchaseAmount,
		&i.UsageLimitPerUser,
		&i.StartTime,
		&i.EndTime,
		&i.PromotionStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePromotion = `-- name: DeletePromotion :exec
DELETE FROM shop_promotions
WHERE id = $1
`

func (q *Queries) DeletePromotion(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deletePromotion, id)
	return err
}

const getAllPromotionsByStatus = `-- name: GetAllPromotionsByStatus :many
SELECT 
    id,
    shop_id,
    promotion_name,
    promotion_type,
    discount_value,
    max_discount_amount,
    min_purchase_amount,
    usage_limit_per_user,
    start_time,
    end_time,
    promotion_status,
    created_at,
    updated_at
FROM shop_promotions
WHERE promotion_status = $1
`

func (q *Queries) GetAllPromotionsByStatus(ctx context.Context, promotionStatus NullPromotionStatus) ([]ShopPromotion, error) {
	rows, err := q.db.Query(ctx, getAllPromotionsByStatus, promotionStatus)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ShopPromotion{}
	for rows.Next() {
		var i ShopPromotion
		if err := rows.Scan(
			&i.ID,
			&i.ShopID,
			&i.PromotionName,
			&i.PromotionType,
			&i.DiscountValue,
			&i.MaxDiscountAmount,
			&i.MinPurchaseAmount,
			&i.UsageLimitPerUser,
			&i.StartTime,
			&i.EndTime,
			&i.PromotionStatus,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPromotionByID = `-- name: GetPromotionByID :one
SELECT
    id,
    shop_id,
    promotion_name,
    promotion_type,
    discount_value,
    max_discount_amount,
    min_purchase_amount,
    usage_limit_per_user,
    start_time,
    end_time,
    promotion_status,
    created_at,
    updated_at
FROM shop_promotions
WHERE id = $1
`

func (q *Queries) GetPromotionByID(ctx context.Context, id pgtype.UUID) (ShopPromotion, error) {
	row := q.db.QueryRow(ctx, getPromotionByID, id)
	var i ShopPromotion
	err := row.Scan(
		&i.ID,
		&i.ShopID,
		&i.PromotionName,
		&i.PromotionType,
		&i.DiscountValue,
		&i.MaxDiscountAmount,
		&i.MinPurchaseAmount,
		&i.UsageLimitPerUser,
		&i.StartTime,
		&i.EndTime,
		&i.PromotionStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPromotionsByShopID = `-- name: GetPromotionsByShopID :many
SELECT
    id,
    shop_id,
    promotion_name,
    promotion_type,
    discount_value,
    max_discount_amount,
    min_purchase_amount,
    usage_limit_per_user,
    start_time,
    end_time,
    promotion_status,
    created_at,
    updated_at
FROM shop_promotions
WHERE shop_id = $1
`

func (q *Queries) GetPromotionsByShopID(ctx context.Context, shopID pgtype.UUID) ([]ShopPromotion, error) {
	rows, err := q.db.Query(ctx, getPromotionsByShopID, shopID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ShopPromotion{}
	for rows.Next() {
		var i ShopPromotion
		if err := rows.Scan(
			&i.ID,
			&i.ShopID,
			&i.PromotionName,
			&i.PromotionType,
			&i.DiscountValue,
			&i.MaxDiscountAmount,
			&i.MinPurchaseAmount,
			&i.UsageLimitPerUser,
			&i.StartTime,
			&i.EndTime,
			&i.PromotionStatus,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePromotion = `-- name: UpdatePromotion :one
UPDATE shop_promotions
SET
    promotion_name = $2,
    promotion_type = $3,
    discount_value = $4,
    max_discount_amount = $5,
    min_purchase_amount = $6,
    usage_limit_per_user = $7,
    start_time = $8,
    end_time = $9,
    promotion_status = $10,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, shop_id, promotion_name, promotion_type, discount_value, max_discount_amount, min_purchase_amount, usage_limit_per_user, start_time, end_time, promotion_status, created_at, updated_at
`

type UpdatePromotionParams struct {
	ID                pgtype.UUID         `json:"id"`
	PromotionName     string              `json:"promotion_name"`
	PromotionType     PromotionType       `json:"promotion_type"`
	DiscountValue     pgtype.Numeric      `json:"discount_value"`
	MaxDiscountAmount pgtype.Numeric      `json:"max_discount_amount"`
	MinPurchaseAmount pgtype.Numeric      `json:"min_purchase_amount"`
	UsageLimitPerUser pgtype.Int4         `json:"usage_limit_per_user"`
	StartTime         pgtype.Timestamptz  `json:"start_time"`
	EndTime           pgtype.Timestamptz  `json:"end_time"`
	PromotionStatus   NullPromotionStatus `json:"promotion_status"`
}

func (q *Queries) UpdatePromotion(ctx context.Context, arg UpdatePromotionParams) (ShopPromotion, error) {
	row := q.db.QueryRow(ctx, updatePromotion,
		arg.ID,
		arg.PromotionName,
		arg.PromotionType,
		arg.DiscountValue,
		arg.MaxDiscountAmount,
		arg.MinPurchaseAmount,
		arg.UsageLimitPerUser,
		arg.StartTime,
		arg.EndTime,
		arg.PromotionStatus,
	)
	var i ShopPromotion
	err := row.Scan(
		&i.ID,
		&i.ShopID,
		&i.PromotionName,
		&i.PromotionType,
		&i.DiscountValue,
		&i.MaxDiscountAmount,
		&i.MinPurchaseAmount,
		&i.UsageLimitPerUser,
		&i.StartTime,
		&i.EndTime,
		&i.PromotionStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
