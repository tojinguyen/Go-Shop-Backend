lint:
	golangci-lint run

build:
	docker compose up -d --build 
up:
	docker compose up -d 
down:
	docker compose down
recreate:
	docker compose up -d --force-recreate

.PHONY: seed-users
seed-users:
	@echo "üå± Seeding user-service database with 50000 customers and 1000 shippers..."
	@go run ./internal/services/user-service/cmd/seeder/main.go -users=50000 -shippers=1000


# ===================================================================
# Protobuf/gRPC Generation
# ===================================================================
# Bi·∫øn ƒë·ªÉ d·ªÖ d√†ng thay ƒë·ªïi ƒë∆∞·ªùng d·∫´n n·∫øu c·∫ßn
PROTO_DIR := proto
GEN_DIR_GO := proto/gen/go

# Li·ªát k√™ tr·ª±c ti·∫øp c√°c file proto ·ªü ƒë√¢y.
# M·ªói khi b·∫°n th√™m m·ªôt file .proto m·ªõi, ch·ªâ c·∫ßn th√™m n√≥ v√†o danh s√°ch n√†y.
PROTO_FILES := \
    shop/v1/shop.proto \
    product/v1/product.proto

# L·ªánh ch√≠nh ƒë·ªÉ generate code
.PHONY: proto-gen
proto-gen:
	@echo "üî• Generating Go code from Protobuf definitions..."
	@echo "Processing files: $(PROTO_FILES)"
	@protoc --proto_path=$(PROTO_DIR) \
	       --go_out=$(GEN_DIR_GO) \
	       --go-grpc_out=$(GEN_DIR_GO) \
	       $(PROTO_FILES)
	@echo "‚úÖ Protobuf/gRPC code generated successfully."

# L·ªánh ƒë·ªÉ c·∫≠p nh·∫≠t go.mod trong th∆∞ m·ª•c generated code
.PHONY: proto-tidy
proto-tidy:
	@echo "üßπ Tidying Go modules in generated proto directory..."
	@cd $(GEN_DIR_GO) && go mod tidy
	@echo "‚úÖ Go modules for generated code are up to date."

# L·ªánh t·ªïng h·ª£p: generate code v√† sau ƒë√≥ tidy go.mod
.PHONY: proto
proto: proto-gen proto-tidy ## Generate all Protobuf/gRPC code and tidy modules