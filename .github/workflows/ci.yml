name: Go-Shop Smart CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # ===============================================================
  # JOB 1: XÁC ĐỊNH CÁC DỊCH VỤ (SERVICES) CÓ THAY ĐỔI
  # ===============================================================
  get-changed-services:
    name: Determine Changed Services
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.set-matrix.outputs.services }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          files: |
            internal/services/**
            internal/pkg/**

      # =========================================================================
      # SỬA LỖI TẠI ĐÂY: Script được cải tiến để tạo JSON một cách an toàn
      # =========================================================================
      - name: Create dynamic matrix
        id: set-matrix
        run: |
          # QUAN TRỌNG: Cập nhật danh sách này mỗi khi bạn thêm một service mới.
          ALL_SERVICES='["user-service", "shop-service"]'

          # Kiểm tra xem các file trong thư mục package chung (`internal/pkg`) có thay đổi không
          HAS_PKG_CHANGES=false
          echo "Checking for changes in shared package..."
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            if [[ "$file" == internal/pkg/* ]]; then
              HAS_PKG_CHANGES=true
              break
            fi
          done

          # Nếu code chung thay đổi, chúng ta cần chạy CI cho TẤT CẢ các service
          if [ "$HAS_PKG_CHANGES" = true ]; then
            echo "Shared code in 'internal/pkg' changed. Running CI for all services."
            echo "services=$ALL_SERVICES" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Nếu không, chỉ xác định các service cụ thể có file bị thay đổi
          echo "Determining changed services..."
          CHANGED_SERVICES_LIST=""
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            if [[ "$file" == internal/services/* ]]; then
              # Trích xuất tên service và thêm vào danh sách
              service_name=$(echo "$file" | cut -d'/' -f3)
              CHANGED_SERVICES_LIST="${CHANGED_SERVICES_LIST} ${service_name}"
            fi
          done
          
          # Loại bỏ các tên bị trùng lặp và tạo mảng
          UNIQUE_SERVICES=$(echo "${CHANGED_SERVICES_LIST}" | xargs -n1 | sort -u | xargs)
          
          # Chuyển đổi mảng thành chuỗi JSON hợp lệ
          JSON_SERVICES=$(echo "${UNIQUE_SERVICES}" | jq -R 'split(" ") | . - [""]' | jq -c .)

          echo "Detected changed services (JSON): ${JSON_SERVICES}"
          echo "services=${JSON_SERVICES}" >> $GITHUB_OUTPUT

  # ===============================================================
  # JOB 2: BUILD, LINT VÀ TEST
  # ===============================================================
  build-and-test:
    name: CI for ${{ matrix.service }}
    runs-on: ubuntu-latest
    needs: get-changed-services
    if: ${{ needs.get-changed-services.outputs.services != '[]' }}

    strategy:
      fail-fast: false
      matrix:
        service: ${{ fromJSON(needs.get-changed-services.outputs.services) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.2'

      - name: Cache Go modules for ${{ matrix.service }}
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.service }}-${{ hashFiles(format('internal/services/{0}/go.sum', matrix.service)) }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.service }}-

      - name: Install Dependencies
        working-directory: ./internal/services/${{ matrix.service }}
        run: go mod download

      - name: Run Unit Tests
        working-directory: ./internal/services/${{ matrix.service }}
        run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.service }}
          path: ./internal/services/${{ matrix.service }}/coverage.out

      - name: Build Go Application
        working-directory: ./internal/services/${{ matrix.service }}
        run: go build -v -o ./app-build ./cmd/main.go