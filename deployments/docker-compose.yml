version: '3.8'

services:
  # Microservices
  user-service:
    build:
      context: ../internal/services/user-service
      dockerfile: Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME:-go-shop}-user-service
    ports:
      - "${USER_SERVICE_PORT:-8080}:8080"
    env_file:
      - ../internal/services/user-service/.env
    depends_on:
      - postgres-user-service
      - redis
    networks:
      - go-shop-network
    restart: unless-stopped

  shop-service:
    build:
      context: ../internal/services/shop-service
      dockerfile: Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME:-go-shop}-shop-service
    ports:
      - "${SHOP_SERVICE_PORT:-8081}:8080"
    env_file:
      - ../internal/services/shop-service/.env
    depends_on:
      - postgres-user-service
      - redis
    networks:
      - go-shop-network
    restart: unless-stopped

  order-service:
    build:
      context: ../internal/services/order-service
      dockerfile: Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME:-go-shop}-order-service
    ports:
      - "${ORDER_SERVICE_PORT:-8082}:8080"
    env_file:
      - ../internal/services/order-service/.env
    depends_on:
      - postgres-user-service
      - redis
    networks:
      - go-shop-network
    restart: unless-stopped

  payment-service:
    build:
      context: ../internal/services/payment-service
      dockerfile: Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME:-go-shop}-payment-service
    ports:
      - "${PAYMENT_SERVICE_PORT:-8083}:8080"
    env_file:
      - ../internal/services/payment-service/.env
    depends_on:
      - postgres-user-service
      - redis
    networks:
      - go-shop-network
    restart: unless-stopped

  shipping-service:
    build:
      context: ../internal/services/shipping-service
      dockerfile: Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME:-go-shop}-shipping-service
    ports:
      - "${SHIPPING_SERVICE_PORT:-8084}:8080"
    env_file:
      - ../internal/services/shipping-service/.env
    depends_on:
      - postgres-user-service
      - redis
    networks:
      - go-shop-network
    restart: unless-stopped

  review-service:
    build:
      context: ../internal/services/review-service
      dockerfile: Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME:-go-shop}-review-service
    ports:
      - "${REVIEW_SERVICE_PORT:-8085}:8080"
    env_file:
      - ../internal/services/review-service/.env
    depends_on:
      - postgres-user-service
      - redis
    networks:
      - go-shop-network  
    restart: unless-stopped

  notification-service:
    build:
      context: ../internal/services/notification-service
      dockerfile: Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME:-go-shop}-notification-service
    ports:
      - "${NOTIFICATION_SERVICE_PORT:-8086}:8080"
    env_file:
      - ../internal/services/notification-service/.env
    depends_on:
      - redis
    networks:
      - go-shop-network
    restart: unless-stopped

  # Infrastructure services
  redis:
    image: ${REDIS_IMAGE:-redis:7-alpine}
    container_name: ${COMPOSE_PROJECT_NAME:-go-shop}-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - ${REDIS_VOLUME_NAME:-redis_data}:/data
    networks:
      - go-shop-network

  postgres-user-service:
    image: ${POSTGRES_IMAGE:-postgres:15-alpine}
    container_name: ${COMPOSE_PROJECT_NAME:-go-shop-user-service}-postgres
    ports:
      - "${DB_PORT:-5432}:5432"
    environment:
      - POSTGRES_DB=${DB_NAME:-go_shop_user_service}
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-password}
      - POSTGRES_INITDB_ARGS=${POSTGRES_INITDB_ARGS:---encoding=UTF-8 --lc-collate=C --lc-ctype=C}
    volumes:
      - ${POSTGRES_VOLUME_NAME:-postgres_data}:/var/lib/postgresql/data
      - ${POSTGRES_INIT_VOLUME:-./init}:/docker-entrypoint-initdb.d
    networks:
      - go-shop-network


volumes:
  redis_data:
    name: ${REDIS_VOLUME_NAME:-redis_data}
  postgres_data:
    name: ${POSTGRES_VOLUME_NAME:-postgres_data}

networks:
  go-shop-network:
    name: ${NETWORK_NAME:-go-shop-network}
    driver: bridge