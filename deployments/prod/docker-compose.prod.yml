version: '3.8'

services:
  # Override service configurations for production
  user-service:
    environment:
      - SERVICE_ENV=production
      - LOG_LEVEL=warn
      - DB_NAME=go_shop_user_service_prod
    env_file:
      - ../../internal/services/user-service/.env
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  shop-service:
    environment:
      - SERVICE_ENV=production
      - LOG_LEVEL=warn
      - DB_NAME=go_shop_shop_service_prod
    env_file:
      - ../../internal/services/shop-service/.env
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  order-service:
    environment:
      - SERVICE_ENV=production
      - LOG_LEVEL=warn
      - DB_NAME=go_shop_order_service_prod
    env_file:
      - ../../internal/services/order-service/.env
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  payment-service:
    environment:
      - SERVICE_ENV=production
      - LOG_LEVEL=warn
      - DB_NAME=go_shop_payment_service_prod
    env_file:
      - ../../internal/services/payment-service/.env
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  shipping-service:
    environment:
      - SERVICE_ENV=production
      - LOG_LEVEL=warn
      - DB_NAME=go_shop_shipping_service_prod
    env_file:
      - ../../internal/services/shipping-service/.env
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  review-service:
    environment:
      - SERVICE_ENV=production
      - LOG_LEVEL=warn
      - DB_NAME=go_shop_review_service_prod
    env_file:
      - ../../internal/services/review-service/.env
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  notification-service:
    environment:
      - SERVICE_ENV=production
      - LOG_LEVEL=warn
    env_file:
      - ../../internal/services/notification-service/.env
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.125'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  redis:
    # Override base config for production
    container_name: ${COMPOSE_PROJECT_NAME:-go-shop}-redis-prod
    command: redis-server --appendonly yes --maxmemory ${REDIS_MAX_MEMORY:-1gb} --maxmemory-policy ${REDIS_MAX_MEMORY_POLICY:-allkeys-lru} --save ${REDIS_SAVE_CONFIG:-900 1 300 10 60 10000}
    restart: unless-stopped
    environment:
      - REDIS_ENV=${APP_ENV:-production}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: ${REDIS_HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${REDIS_HEALTH_CHECK_TIMEOUT:-10s}
      retries: ${REDIS_HEALTH_CHECK_RETRIES:-3}
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: ${REDIS_MEMORY_LIMIT:-1G}
          cpus: '${REDIS_CPU_LIMIT:-1.0}'
        reservations:
          memory: ${REDIS_MEMORY_RESERVATION:-512M}
          cpus: '${REDIS_CPU_RESERVATION:-0.5}'
    volumes:
      - ${REDIS_VOLUME_NAME:-redis_prod_data}:/data
    networks:
      - go-shop-network
    logging:
      driver: "json-file"
      options:
        max-size: "${LOG_MAX_SIZE:-10m}"
        max-file: "${LOG_MAX_FILE:-3}"

  postgres:
    # Override base config for production
    container_name: ${COMPOSE_PROJECT_NAME:-go-shop}-postgres-prod
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_NAME:-go_shop_prod}
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=${POSTGRES_INITDB_ARGS:---encoding=UTF-8 --lc-collate=C --lc-ctype=C}
    command: >
      postgres
      -c max_connections=${POSTGRES_MAX_CONNECTIONS:-100}
      -c shared_buffers=${POSTGRES_SHARED_BUFFERS:-256MB}
      -c effective_cache_size=${POSTGRES_EFFECTIVE_CACHE_SIZE:-1GB}
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-go_shop_prod}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
    volumes:
      - ${POSTGRES_VOLUME_NAME:-postgres_prod_data}:/var/lib/postgresql/data
    networks:
      - go-shop-network
    logging:
      driver: "json-file"
      options:
        max-size: "${LOG_MAX_SIZE:-10m}"
        max-file: "${LOG_MAX_FILE:-3}"

volumes:
  redis_prod_data:
    name: ${REDIS_VOLUME_NAME:-redis_prod_data}
    driver: local
  postgres_prod_data:
    name: ${POSTGRES_VOLUME_NAME:-postgres_prod_data}
    driver: local