// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.31.1
// source: shop/v1/shop.proto

package shop_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShopServiceClient is the client API for ShopService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShopServiceClient interface {
	CheckShopOwnership(ctx context.Context, in *CheckShopOwnershipRequest, opts ...grpc.CallOption) (*CheckShopOwnershipResponse, error)
	CheckShopExists(ctx context.Context, in *CheckShopExistsRequest, opts ...grpc.CallOption) (*CheckShopExistsResponse, error)
	CheckPromotionEligibility(ctx context.Context, in *CheckPromotionEligibilityRequest, opts ...grpc.CallOption) (*CheckPromotionEligibilityResponse, error)
}

type shopServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShopServiceClient(cc grpc.ClientConnInterface) ShopServiceClient {
	return &shopServiceClient{cc}
}

func (c *shopServiceClient) CheckShopOwnership(ctx context.Context, in *CheckShopOwnershipRequest, opts ...grpc.CallOption) (*CheckShopOwnershipResponse, error) {
	out := new(CheckShopOwnershipResponse)
	err := c.cc.Invoke(ctx, "/goshop.shop.v1.ShopService/CheckShopOwnership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopServiceClient) CheckShopExists(ctx context.Context, in *CheckShopExistsRequest, opts ...grpc.CallOption) (*CheckShopExistsResponse, error) {
	out := new(CheckShopExistsResponse)
	err := c.cc.Invoke(ctx, "/goshop.shop.v1.ShopService/CheckShopExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopServiceClient) CheckPromotionEligibility(ctx context.Context, in *CheckPromotionEligibilityRequest, opts ...grpc.CallOption) (*CheckPromotionEligibilityResponse, error) {
	out := new(CheckPromotionEligibilityResponse)
	err := c.cc.Invoke(ctx, "/goshop.shop.v1.ShopService/CheckPromotionEligibility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShopServiceServer is the server API for ShopService service.
// All implementations must embed UnimplementedShopServiceServer
// for forward compatibility
type ShopServiceServer interface {
	CheckShopOwnership(context.Context, *CheckShopOwnershipRequest) (*CheckShopOwnershipResponse, error)
	CheckShopExists(context.Context, *CheckShopExistsRequest) (*CheckShopExistsResponse, error)
	CheckPromotionEligibility(context.Context, *CheckPromotionEligibilityRequest) (*CheckPromotionEligibilityResponse, error)
	mustEmbedUnimplementedShopServiceServer()
}

// UnimplementedShopServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShopServiceServer struct {
}

func (UnimplementedShopServiceServer) CheckShopOwnership(context.Context, *CheckShopOwnershipRequest) (*CheckShopOwnershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckShopOwnership not implemented")
}
func (UnimplementedShopServiceServer) CheckShopExists(context.Context, *CheckShopExistsRequest) (*CheckShopExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckShopExists not implemented")
}
func (UnimplementedShopServiceServer) CheckPromotionEligibility(context.Context, *CheckPromotionEligibilityRequest) (*CheckPromotionEligibilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPromotionEligibility not implemented")
}
func (UnimplementedShopServiceServer) mustEmbedUnimplementedShopServiceServer() {}

// UnsafeShopServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShopServiceServer will
// result in compilation errors.
type UnsafeShopServiceServer interface {
	mustEmbedUnimplementedShopServiceServer()
}

func RegisterShopServiceServer(s grpc.ServiceRegistrar, srv ShopServiceServer) {
	s.RegisterService(&ShopService_ServiceDesc, srv)
}

func _ShopService_CheckShopOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckShopOwnershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).CheckShopOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goshop.shop.v1.ShopService/CheckShopOwnership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).CheckShopOwnership(ctx, req.(*CheckShopOwnershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopService_CheckShopExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckShopExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).CheckShopExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goshop.shop.v1.ShopService/CheckShopExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).CheckShopExists(ctx, req.(*CheckShopExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopService_CheckPromotionEligibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPromotionEligibilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).CheckPromotionEligibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goshop.shop.v1.ShopService/CheckPromotionEligibility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).CheckPromotionEligibility(ctx, req.(*CheckPromotionEligibilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShopService_ServiceDesc is the grpc.ServiceDesc for ShopService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShopService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goshop.shop.v1.ShopService",
	HandlerType: (*ShopServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckShopOwnership",
			Handler:    _ShopService_CheckShopOwnership_Handler,
		},
		{
			MethodName: "CheckShopExists",
			Handler:    _ShopService_CheckShopExists_Handler,
		},
		{
			MethodName: "CheckPromotionEligibility",
			Handler:    _ShopService_CheckPromotionEligibility_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shop/v1/shop.proto",
}
