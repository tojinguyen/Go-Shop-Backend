// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.31.1
// source: product/v1/product.proto

package product_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductServiceClient is the client API for ProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductServiceClient interface {
	GetProductInfo(ctx context.Context, in *GetProductInfoRequest, opts ...grpc.CallOption) (*GetProductInfoResponse, error)
	GetProductsInfo(ctx context.Context, in *GetProductsInfoRequest, opts ...grpc.CallOption) (*GetProductsInfoResponse, error)
	ReserveProducts(ctx context.Context, in *ReserveProductsRequest, opts ...grpc.CallOption) (*ReserveProductsResponse, error)
	UnreserveProducts(ctx context.Context, in *UnreserveProductsRequest, opts ...grpc.CallOption) (*UnreserveProductsResponse, error)
	GetOrderReservationStatus(ctx context.Context, in *GetOrderReservationStatusRequest, opts ...grpc.CallOption) (*GetOrderReservationStatusResponse, error)
}

type productServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductServiceClient(cc grpc.ClientConnInterface) ProductServiceClient {
	return &productServiceClient{cc}
}

func (c *productServiceClient) GetProductInfo(ctx context.Context, in *GetProductInfoRequest, opts ...grpc.CallOption) (*GetProductInfoResponse, error) {
	out := new(GetProductInfoResponse)
	err := c.cc.Invoke(ctx, "/goshop.product.v1.ProductService/GetProductInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetProductsInfo(ctx context.Context, in *GetProductsInfoRequest, opts ...grpc.CallOption) (*GetProductsInfoResponse, error) {
	out := new(GetProductsInfoResponse)
	err := c.cc.Invoke(ctx, "/goshop.product.v1.ProductService/GetProductsInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ReserveProducts(ctx context.Context, in *ReserveProductsRequest, opts ...grpc.CallOption) (*ReserveProductsResponse, error) {
	out := new(ReserveProductsResponse)
	err := c.cc.Invoke(ctx, "/goshop.product.v1.ProductService/ReserveProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UnreserveProducts(ctx context.Context, in *UnreserveProductsRequest, opts ...grpc.CallOption) (*UnreserveProductsResponse, error) {
	out := new(UnreserveProductsResponse)
	err := c.cc.Invoke(ctx, "/goshop.product.v1.ProductService/UnreserveProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetOrderReservationStatus(ctx context.Context, in *GetOrderReservationStatusRequest, opts ...grpc.CallOption) (*GetOrderReservationStatusResponse, error) {
	out := new(GetOrderReservationStatusResponse)
	err := c.cc.Invoke(ctx, "/goshop.product.v1.ProductService/GetOrderReservationStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServiceServer is the server API for ProductService service.
// All implementations must embed UnimplementedProductServiceServer
// for forward compatibility
type ProductServiceServer interface {
	GetProductInfo(context.Context, *GetProductInfoRequest) (*GetProductInfoResponse, error)
	GetProductsInfo(context.Context, *GetProductsInfoRequest) (*GetProductsInfoResponse, error)
	ReserveProducts(context.Context, *ReserveProductsRequest) (*ReserveProductsResponse, error)
	UnreserveProducts(context.Context, *UnreserveProductsRequest) (*UnreserveProductsResponse, error)
	GetOrderReservationStatus(context.Context, *GetOrderReservationStatusRequest) (*GetOrderReservationStatusResponse, error)
	mustEmbedUnimplementedProductServiceServer()
}

// UnimplementedProductServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductServiceServer struct {
}

func (UnimplementedProductServiceServer) GetProductInfo(context.Context, *GetProductInfoRequest) (*GetProductInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductInfo not implemented")
}
func (UnimplementedProductServiceServer) GetProductsInfo(context.Context, *GetProductsInfoRequest) (*GetProductsInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductsInfo not implemented")
}
func (UnimplementedProductServiceServer) ReserveProducts(context.Context, *ReserveProductsRequest) (*ReserveProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveProducts not implemented")
}
func (UnimplementedProductServiceServer) UnreserveProducts(context.Context, *UnreserveProductsRequest) (*UnreserveProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnreserveProducts not implemented")
}
func (UnimplementedProductServiceServer) GetOrderReservationStatus(context.Context, *GetOrderReservationStatusRequest) (*GetOrderReservationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderReservationStatus not implemented")
}
func (UnimplementedProductServiceServer) mustEmbedUnimplementedProductServiceServer() {}

// UnsafeProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServiceServer will
// result in compilation errors.
type UnsafeProductServiceServer interface {
	mustEmbedUnimplementedProductServiceServer()
}

func RegisterProductServiceServer(s grpc.ServiceRegistrar, srv ProductServiceServer) {
	s.RegisterService(&ProductService_ServiceDesc, srv)
}

func _ProductService_GetProductInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetProductInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goshop.product.v1.ProductService/GetProductInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetProductInfo(ctx, req.(*GetProductInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetProductsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductsInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetProductsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goshop.product.v1.ProductService/GetProductsInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetProductsInfo(ctx, req.(*GetProductsInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ReserveProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ReserveProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goshop.product.v1.ProductService/ReserveProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ReserveProducts(ctx, req.(*ReserveProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UnreserveProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnreserveProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UnreserveProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goshop.product.v1.ProductService/UnreserveProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UnreserveProducts(ctx, req.(*UnreserveProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetOrderReservationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderReservationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetOrderReservationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goshop.product.v1.ProductService/GetOrderReservationStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetOrderReservationStatus(ctx, req.(*GetOrderReservationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductService_ServiceDesc is the grpc.ServiceDesc for ProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goshop.product.v1.ProductService",
	HandlerType: (*ProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProductInfo",
			Handler:    _ProductService_GetProductInfo_Handler,
		},
		{
			MethodName: "GetProductsInfo",
			Handler:    _ProductService_GetProductsInfo_Handler,
		},
		{
			MethodName: "ReserveProducts",
			Handler:    _ProductService_ReserveProducts_Handler,
		},
		{
			MethodName: "UnreserveProducts",
			Handler:    _ProductService_UnreserveProducts_Handler,
		},
		{
			MethodName: "GetOrderReservationStatus",
			Handler:    _ProductService_GetOrderReservationStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product/v1/product.proto",
}
