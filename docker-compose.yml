version: '3.8'

services:
  # API Gateway
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: ${PROJECT_NAME:-go-shop}-nginx
    environment:
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    ports:
      - "${NGINX_PORT:-80}:80"
    depends_on:
      - user-service
      - shop-service
    networks:
      - go-shop-network
    restart: unless-stopped
    volumes:
      - ./nginx/logs:/var/log/nginx
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Infrastructure services
  redis-cache:
    image: ${REDIS_IMAGE:-redis:7-alpine}
    container_name: ${PROJECT_NAME:-go-shop}-redis-cache
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD}
    env_file:
      - .env
    volumes:
      - ${REDIS_VOLUME_NAME:-redis_data}:/data
    networks:
      - go-shop-network
    restart: unless-stopped

############## User Service Section ##############
  # User Service
  user-service:
    build:
      context: .
      dockerfile: ./internal/services/user-service/Dockerfile
    container_name: ${PROJECT_NAME:-go-shop}-user-service
    ports:
      - "${USER_SERVICE_SERVICE_PORT:-8080}:8080"
    env_file:
      - .env
    depends_on:
      postgres-user-service:
        condition: service_healthy
      redis-cache:
        condition: service_started
    networks:
      - go-shop-network
    restart: unless-stopped

  # PostgreSQL Database User Service
  postgres-user-service:
    image: postgres:15
    container_name: postgres-user-service
    ports:
      - "${USER_SERVICE_POSTGRES_PORT:-6000}:5432"
    environment: 
      POSTGRES_USER: ${USER_SERVICE_POSTGRES_USER}
      POSTGRES_PASSWORD: ${USER_SERVICE_POSTGRES_PASSWORD}
      POSTGRES_DB: ${USER_SERVICE_POSTGRES_DB}
    volumes:
      - user_postgres_data:/var/lib/postgresql/data
    networks:
      - go-shop-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

############## Shop Service Section ##############
  # Shop Service
  shop-service:
    build:
      context: .
      dockerfile: ./internal/services/shop-service/Dockerfile
    container_name: ${PROJECT_NAME:-go-shop}-shop-service
    ports:
      - "${SHOP_SERVICE_SERVICE_PORT:-8081}:8081"
    env_file:
      - .env
    depends_on:
      postgres-shop-service:
        condition: service_healthy
      redis-cache:
        condition: service_started
    networks:
      - go-shop-network
    restart: unless-stopped

  # PostgreSQL Database User Service
  postgres-shop-service:
    image: postgres:15
    container_name: postgres-shop-service
    ports:
      - "${SHOP_SERVICE_POSTGRES_PORT:-6001}:5432"
    environment: 
      POSTGRES_USER: ${SHOP_SERVICE_POSTGRES_USER}
      POSTGRES_PASSWORD: ${SHOP_SERVICE_POSTGRES_PASSWORD}
      POSTGRES_DB: ${SHOP_SERVICE_POSTGRES_DB}
    volumes:
      - shop_postgres_data:/var/lib/postgresql/data
    networks:
      - go-shop-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

############## Product Service Section ##############
  # Product Service
  product-service:
    build:
      context: .
      dockerfile: ./internal/services/product-service/Dockerfile
    container_name: ${PROJECT_NAME:-go-shop}-product-service
    ports:
      - "${PRODUCT_SERVICE_SERVICE_PORT:-8081}:8081"
    env_file:
      - .env
    depends_on:
      postgres-product-service:
        condition: service_healthy
      redis-cache:
        condition: service_started
    networks:
      - go-shop-network
    restart: unless-stopped

  # PostgreSQL Database User Service
  postgres-product-service:
    image: postgres:15
    container_name: postgres-product-service
    ports:
      - "${PRODUCT_SERVICE_POSTGRES_PORT:-6001}:5432"
    environment: 
      POSTGRES_USER: ${PRODUCT_SERVICE_POSTGRES_USER}
      POSTGRES_PASSWORD: ${PRODUCT_SERVICE_POSTGRES_PASSWORD}
      POSTGRES_DB: ${PRODUCT_SERVICE_POSTGRES_DB}
    volumes:
      - product_postgres_data:/var/lib/postgresql/data
    networks:
      - go-shop-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

############## Cart Service Section ##############
  # Cart Service
  cart-service:
    build:
      context: .
      dockerfile: ./internal/services/cart-service/Dockerfile
    container_name: ${PROJECT_NAME:-go-shop}-cart-service
    ports:
      - "${CART_SERVICE_PORT:-8083}:8083"
    depends_on:
      postgres-cart-service:
        condition: service_healthy
      redis-cache:
        condition: service_started
    networks:
      - go-shop-network
    restart: unless-stopped

  # PostgreSQL Database for Cart Service
  postgres-cart-service:
    image: postgres:15
    container_name: postgres-cart-service
    ports:
      - "${CART_SERVICE_DB_PORT:-6003}:5432"
    environment:
      POSTGRES_USER: ${CART_SERVICE_DB_USER}
      POSTGRES_PASSWORD: ${CART_SERVICE_DB_PASSWORD}
      POSTGRES_DB: ${CART_SERVICE_DB_NAME}
    volumes:
      - cart_postgres_data:/var/lib/postgresql/data
    networks:
      - go-shop-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

############## Monitoring Service Section ##############
  prometheus:
    image: prom/prometheus:v2.47.2
    container_name: ${PROJECT_NAME:-go-shop}-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    networks:
      - go-shop-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana-oss:10.2.2
    container_name: ${PROJECT_NAME:-go-shop}-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin # Thay đổi trong môi trường production
    networks:
      - go-shop-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # =======================================================
  # EXPORTERS (để giám sát các service không có sẵn metrics)
  # =======================================================
  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:1.1.0
    container_name: ${PROJECT_NAME:-go-shop}-nginx-exporter
    command: -nginx.scrape-uri http://nginx/stub_status # Lấy metrics từ Nginx
    networks:
      - go-shop-network
    depends_on:
      - nginx
    restart: unless-stopped

  redis-exporter:
    image: oliver006/redis_exporter:v1.55.0
    container_name: ${PROJECT_NAME:-go-shop}-redis-exporter
    environment:
      - REDIS_ADDR=redis://redis-cache:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD} # Lấy từ file .env
    networks:
      - go-shop-network
    depends_on:
      - redis-cache
    restart: unless-stopped

  postgres-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter:v0.15.0
    container_name: ${PROJECT_NAME:-go-shop}-postgres-exporter
    environment:
      # Cung cấp chuỗi kết nối cho TẤT CẢ các database
      - DATA_SOURCE_NAME=postgresql://postgres:${USER_SERVICE_POSTGRES_PASSWORD}@postgres-user-service:5432/${USER_SERVICE_POSTGRES_DB}?sslmode=disable,postgresql://postgres:${SHOP_SERVICE_POSTGRES_PASSWORD}@postgres-shop-service:5432/${SHOP_SERVICE_POSTGRES_DB}?sslmode=disable,postgresql://postgres:${PRODUCT_SERVICE_POSTGRES_PASSWORD}@postgres-product-service:5432/${PRODUCT_SERVICE_POSTGRES_DB}?sslmode=disable
    networks:
      - go-shop-network
    depends_on:
      - postgres-user-service
      - postgres-shop-service
      - postgres-product-service
    restart: unless-stopped

volumes:
  cart_postgres_data:
  product_postgres_data:
  shop_postgres_data:
  user_postgres_data:
  redis_data:
  db_data:
  grafana_data:

networks:
  go-shop-network:
    driver: bridge