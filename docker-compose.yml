version: '3.8'

services:
  # API Gateway
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: ${PROJECT_NAME:-go-shop}-nginx
    ports:
      - "${NGINX_PORT:-80}:80"
    depends_on:
      - user-service
    networks:
      - go-shop-network
    restart: unless-stopped
    volumes:
      - ./nginx/logs:/var/log/nginx
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Microservices
  user-service:
    build:
      context: .
      dockerfile: ./internal/services/user-service/Dockerfile
    container_name: ${PROJECT_NAME:-go-shop}-user-service
    # Remove external port mapping since we'll access through nginx
    expose:
      - "8080"
    env_file:
      - .env
      - ./internal/services/user-service/.env
    depends_on:
      - postgres-user-service
      - redis-cache
    networks:
      - go-shop-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres-user-service:
    image: postgres:15-alpine
    container_name: ${PROJECT_NAME:-go-shop}-postgres-user-service
    ports:
      - "${DB_PORT:-5432}:5432"
    env_file:
      - .env
      - ./internal/services/user-service/.env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - go-shop-network
    restart: unless-stopped

  # Infrastructure services
  redis-cache:
    image: ${REDIS_IMAGE:-redis:7-alpine}
    container_name: ${PROJECT_NAME:-go-shop}-redis-cache
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD}
    env_file:
      - .env
    volumes:
      - ${REDIS_VOLUME_NAME:-redis_data}:/data
    networks:
      - go-shop-network
    restart: unless-stopped

  # pgAdmin GUI for PostgreSQL
  pgadmin:
    image: dpage/pgadmin4
    container_name: ${PROJECT_NAME:-go-shop}-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@go-shop.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    ports:
      - "5050:80"
    depends_on:
      - postgres-user-service
    networks:
      - go-shop-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  go-shop-network:
    driver: bridge