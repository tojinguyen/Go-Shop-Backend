version: '3.8'

services:
# -------------------------------------------------------
  # KONG API GATEWAY SECTION - THAY THẾ CHO NGINX (DB-less mode)
  # -------------------------------------------------------
  kong-gateway:
    image: kong:3.7
    container_name: ${PROJECT_NAME:-go-shop}-kong-gateway
    user: kong
    environment:
      KONG_DATABASE: off
      KONG_PROXY_LISTEN: "0.0.0.0:80"
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_DECLARATIVE_CONFIG: /etc/kong/kong.yml
      JWT_SECRET_KEY: ${JWT_SECRET_KEY} 
      JWT_ISSUER: ${JWT_ISSUER}
    networks:
      - go-shop-network
    ports:
      - "${KONG_HTTP_PORT:-80}:80"   # Cổng cho traffic
    depends_on:
      # Đảm bảo các service backend đã khởi động trước khi Kong bắt đầu nhận traffic
      user-service: { condition: service_started }
      shop-service: { condition: service_started }
      product-service: { condition: service_started }
      cart-service: { condition: service_started }
      order-service: { condition: service_started }
      payment-service: { condition: service_started }
    volumes:
      - ./kong.yml:/etc/kong/kong.yml:ro # Mount file cấu hình
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: on-failure
 
  # Infrastructure services
  redis-cache:
    image: ${REDIS_IMAGE:-redis:7-alpine}
    container_name: ${PROJECT_NAME:-go-shop}-redis-cache
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD}
    env_file:
      - .env
    volumes:
      - ${REDIS_VOLUME_NAME:-redis_data}:/data
    networks:
      - go-shop-network
    restart: unless-stopped

############## User Service Section ##############
  # User Service
  user-service:
    build:
      context: .
      dockerfile: ./internal/services/user-service/Dockerfile
    container_name: ${PROJECT_NAME:-go-shop}-user-service
    env_file:
      - .env
    ports:
      - "${USER_SERVICE_PORT:-8080}:8080"
    depends_on:
      postgres-user-service:
        condition: service_healthy
      redis-cache:
        condition: service_started
    networks:
      - go-shop-network
    restart: unless-stopped
    labels:
      - "prometheus.scrape=true"

  # PostgreSQL Database User Service
  postgres-user-service:
    image: postgres:15
    container_name: postgres-user-service
    ports:
      - "${USER_SERVICE_POSTGRES_PORT:-6000}:5432"
    environment: 
      POSTGRES_USER: ${USER_SERVICE_POSTGRES_USER}
      POSTGRES_PASSWORD: ${USER_SERVICE_POSTGRES_PASSWORD}
      POSTGRES_DB: ${USER_SERVICE_POSTGRES_DB}
    volumes:
      - user_postgres_data:/var/lib/postgresql/data
    networks:
      - go-shop-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

############## Shop Service Section ##############
  # Shop Service
  shop-service:
    build:
      context: .
      dockerfile: ./internal/services/shop-service/Dockerfile
    container_name: ${PROJECT_NAME:-go-shop}-shop-service
    env_file:
      - .env
    depends_on:
      postgres-shop-service:
        condition: service_healthy
      redis-cache:
        condition: service_started
    networks:
      - go-shop-network
    restart: unless-stopped
    labels:
      - "prometheus.scrape=true"

  # PostgreSQL Database User Service
  postgres-shop-service:
    image: postgres:15
    container_name: postgres-shop-service
    ports:
      - "${SHOP_SERVICE_POSTGRES_PORT:-6001}:5432"
    environment: 
      POSTGRES_USER: ${SHOP_SERVICE_POSTGRES_USER}
      POSTGRES_PASSWORD: ${SHOP_SERVICE_POSTGRES_PASSWORD}
      POSTGRES_DB: ${SHOP_SERVICE_POSTGRES_DB}
    volumes:
      - shop_postgres_data:/var/lib/postgresql/data
    networks:
      - go-shop-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

############## Product Service Section ##############
  # Product Service
  product-service:
    build:
      context: .
      dockerfile: ./internal/services/product-service/Dockerfile
    container_name: ${PROJECT_NAME:-go-shop}-product-service
    env_file:
      - .env
    depends_on:
      postgres-product-service:
        condition: service_healthy
      redis-cache:
        condition: service_started
    networks:
      - go-shop-network
    restart: unless-stopped
    labels:
      - "prometheus.scrape=true"

  # PostgreSQL Database User Service
  postgres-product-service:
    image: postgres:15
    container_name: postgres-product-service
    ports:
      - "${PRODUCT_SERVICE_POSTGRES_PORT:-6001}:5432"
    environment: 
      POSTGRES_USER: ${PRODUCT_SERVICE_POSTGRES_USER}
      POSTGRES_PASSWORD: ${PRODUCT_SERVICE_POSTGRES_PASSWORD}
      POSTGRES_DB: ${PRODUCT_SERVICE_POSTGRES_DB}
    volumes:
      - product_postgres_data:/var/lib/postgresql/data
    networks:
      - go-shop-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

############## Cart Service Section ##############
  # Cart Service
  cart-service:
    build:
      context: .
      dockerfile: ./internal/services/cart-service/Dockerfile
    container_name: ${PROJECT_NAME:-go-shop}-cart-service
    env_file:
      - .env
    depends_on:
      postgres-cart-service:
        condition: service_healthy
      redis-cache:
        condition: service_started
    networks:
      - go-shop-network
    restart: unless-stopped
    labels:
      - "prometheus.scrape=true"

  # PostgreSQL Database for Cart Service
  postgres-cart-service:
    image: postgres:15
    container_name: postgres-cart-service
    ports:
      - "${CART_SERVICE_DB_PORT:-6003}:5432"
    environment:
      POSTGRES_USER: ${CART_SERVICE_DB_USER}
      POSTGRES_PASSWORD: ${CART_SERVICE_DB_PASSWORD}
      POSTGRES_DB: ${CART_SERVICE_DB_NAME}
    volumes:
      - cart_postgres_data:/var/lib/postgresql/data
    networks:
      - go-shop-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

############## Order Service Section ##############
  # Order Service
  order-service:
    build:
      context: .
      dockerfile: ./internal/services/order-service/Dockerfile
    container_name: ${PROJECT_NAME:-go-shop}-order-service
    env_file:
      - .env
    depends_on:
      postgres-order-service:
        condition: service_healthy
      redis-cache:
        condition: service_started
    networks:
      - go-shop-network
    restart: unless-stopped
    labels:
      - "prometheus.scrape=true"

  # PostgreSQL Database for Order Service
  postgres-order-service:
    image: postgres:15
    container_name: postgres-order-service
    ports:
      - "${ORDER_SERVICE_DB_PORT:-6004}:5432"
    environment:
      POSTGRES_USER: ${ORDER_SERVICE_DB_USER}
      POSTGRES_PASSWORD: ${ORDER_SERVICE_DB_PASSWORD}
      POSTGRES_DB: ${ORDER_SERVICE_DB_NAME}
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - go-shop-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

############## Payment Service Section ##############
  payment-service:
    build:
      context: .
      dockerfile: ./internal/services/payment-service/Dockerfile
    container_name: ${PROJECT_NAME:-go-shop}-payment-service
    env_file:
      - .env
    depends_on:
      postgres-payment-service:
        condition: service_healthy
      order-service:
        condition: service_started
    networks:
      - go-shop-network
    restart: unless-stopped

  postgres-payment-service:
    image: postgres:15
    container_name: postgres-payment-service
    ports:
      - "${PAYMENT_SERVICE_DB_PORT:-6005}:5432"
    environment:
      POSTGRES_USER: ${PAYMENT_SERVICE_DB_USER}
      POSTGRES_PASSWORD: ${PAYMENT_SERVICE_DB_PASSWORD}
      POSTGRES_DB: ${PAYMENT_SERVICE_DB_NAME}
    volumes:
      - payment_postgres_data:/var/lib/postgresql/data
    networks:
      - go-shop-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

############## Monitoring Service Section ##############
  prometheus:
    image: prom/prometheus:v2.47.2
    container_name: ${PROJECT_NAME:-go-shop}-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    networks:
      - go-shop-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana-oss:10.2.2
    container_name: ${PROJECT_NAME:-go-shop}-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin # Thay đổi trong môi trường production
    networks:
      - go-shop-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # =======================================================
  # EXPORTERS (để giám sát các service không có sẵn metrics)
  # =======================================================
  redis-exporter:
    image: oliver006/redis_exporter:v1.55.0
    container_name: ${PROJECT_NAME:-go-shop}-redis-exporter
    environment:
      - REDIS_ADDR=redis://redis-cache:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD} # Lấy từ file .env
    networks:
      - go-shop-network
    depends_on:
      - redis-cache
    restart: unless-stopped

  postgres-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter:v0.15.0
    container_name: ${PROJECT_NAME:-go-shop}-postgres-exporter
    environment:
      # Cung cấp chuỗi kết nối cho TẤT CẢ các database
      - DATA_SOURCE_NAME=postgresql://postgres:${USER_SERVICE_POSTGRES_PASSWORD}@postgres-user-service:5432/${USER_SERVICE_POSTGRES_DB}?sslmode=disable,postgresql://postgres:${SHOP_SERVICE_POSTGRES_PASSWORD}@postgres-shop-service:5432/${SHOP_SERVICE_POSTGRES_DB}?sslmode=disable,postgresql://postgres:${PRODUCT_SERVICE_POSTGRES_PASSWORD}@postgres-product-service:5432/${PRODUCT_SERVICE_POSTGRES_DB}?sslmode=disable
    networks:
      - go-shop-network
    depends_on:
      - postgres-user-service
      - postgres-shop-service
      - postgres-product-service
    restart: unless-stopped

############## Kafka Section (KRaft Mode - No Zookeeper) ##############
  kafka:
    image: confluentinc/cp-kafka:7.6.0 # Sử dụng phiên bản mới để đảm bảo KRaft ổn định
    container_name: ${PROJECT_NAME:-go-shop}-kafka
    networks:
      - go-shop-network
    ports:
      - "9092:9092" # Port cho kết nối từ bên ngoài Docker (máy host của bạn)
    environment:
      # --- Cấu hình KRaft ---
      # 1. Vai trò của node này: vừa là broker, vừa là controller
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      # 2. Danh sách các node controller (vì chạy 1 node nên trỏ về chính nó)
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:9093'
      # 3. ID của cluster, phải là duy nhất. Tạo bằng lệnh: `kafka-storage random-uuid`
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk' # <-- Dùng ID này hoặc tạo ID mới

      # --- Cấu hình Listeners ---
      KAFKA_LISTENERS: 'INTERNAL://:29092,CONTROLLER://:9093,EXTERNAL://:9092'
      KAFKA_ADVERTISED_LISTENERS: 'INTERNAL://kafka:29092,EXTERNAL://localhost:9092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'INTERNAL'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'

      # --- Cấu hình khác ---
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:29092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

      
volumes:
  payment_postgres_data:
  order_postgres_data:
  cart_postgres_data:
  product_postgres_data:
  shop_postgres_data:
  user_postgres_data:
  redis_data:
  db_data:
  grafana_data:

networks:
  go-shop-network:
    driver: bridge